// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// files statically implements the virtual filesystem provided to vfsgen.
var files = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/_assetgen.scss": &vfsgen۰CompressedFileInfo{
			name:             "_assetgen.scss",
			modTime:          time.Date(2021, 3, 9, 1, 28, 4, 242143908, time.UTC),
			uncompressedSize: 132,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x48\xcf\xcf\x4f\xcf\x49\x4d\xcb\xcf\x2b\x51\xc8\xcd\xac\xc8\xcc\xd3\xe3\x72\x00\xd3\x48\x12\x1a\x2a\x20\x52\x53\xa1\x9a\x4b\x41\xc1\x01\xc4\xd4\x4d\x4b\x4c\x4e\x05\x73\x15\x14\x1c\x52\x13\x93\x33\x14\x54\xb2\x75\x14\x54\xca\x14\x70\x6a\x03\x01\xe5\x6a\x95\xec\x5a\x2b\x05\x95\x32\x6b\xb0\x40\x2d\x17\x08\xd7\x72\x01\x02\x00\x00\xff\xff\x13\x5c\x8e\xb4\x84\x00\x00\x00"),
		},
		"/assets.anko": &vfsgen۰FileInfo{
			name:    "assets.anko",
			modTime: time.Date(2021, 3, 9, 1, 28, 4, 242155650, time.UTC),
			content: []byte("\x23\x20\x67\x65\x6e\x65\x72\x61\x74\x65\x64\x20\x70\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x73\x63\x72\x69\x70\x74\x0a\x0a\x23\x20\x6a\x73\x28\x22\x6a\x73\x2f\x61\x70\x70\x2e\x6a\x73\x22\x2c\x20\x2e\x2e\x2e\x29\x0a"),
		},
		"/gitignore": &vfsgen۰FileInfo{
			name:    "gitignore",
			modTime: time.Date(2021, 3, 9, 1, 28, 4, 242170458, time.UTC),
			content: []byte("\x2f\x61\x73\x73\x65\x74\x73\x2e\x67\x6f\x0a\x2f\x6d\x61\x6e\x69\x66\x65\x73\x74\x2e\x67\x6f\x0a\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2e\x67\x6f\x0a\x2f\x67\x65\x6f\x69\x70\x2f\x67\x65\x6f\x69\x70\x2e\x67\x6f\x0a\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x73\x2f\x2a\x2e\x68\x74\x6d\x6c\x2e\x67\x6f\x0a\x2a\x2e\x6d\x6f\x0a"),
		},
		"/manifest.go": &vfsgen۰CompressedFileInfo{
			name:             "manifest.go",
			modTime:          time.Date(2021, 3, 9, 1, 28, 4, 242222166, time.UTC),
			uncompressedSize: 3659,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6e\xdb\xb8\x12\xbe\x96\x9e\x62\x2a\x20\x05\xd9\x23\x4b\x09\x7a\xce\xb9\x70\xd7\x17\xd9\x26\xd9\x04\x68\x82\xa2\xc9\xa2\x17\x41\x2e\x18\x99\xb4\x89\x48\xa4\x4a\xd2\x89\xb3\x6d\xde\x69\xdf\x67\x5f\x66\x31\xfc\xb1\x65\xc7\xcd\xb6\xc0\xe6\x26\x16\x35\xf3\xcd\xf7\x0d\x87\x1f\xd5\xb3\xe6\x8e\xcd\x38\x30\x6b\xb9\xb3\x79\x2e\xbb\x5e\x1b\x07\x24\xcf\x8a\xdb\x47\xc7\x6d\x91\x67\x45\xa3\xbb\xde\x70\x6b\xeb\xd9\x1f\xb2\x0f\x0b\xca\xf1\xa5\xf3\x3f\xcd\x63\xef\x74\x6d\xe7\xec\x00\x1f\x45\xe7\x57\xa5\xae\xa5\x5e\x38\xd9\xe2\x43\x27\x3b\x8e\xff\x15\x77\xf5\xdc\x39\x8f\xa0\x3d\xb0\x75\x46\xaa\x99\xff\xe9\x7c\x50\x9e\x15\x33\xe9\xe6\x8b\xdb\xaa\xd1\x5d\x6d\xe7\x0b\xd3\x68\xfd\xc1\x67\x09\x5b\xdf\x0b\x1b\x30\x69\x9e\xd7\x35\xdc\x0b\x3b\xe3\xea\xaf\x3f\x0f\x91\x3a\x48\x0b\x0c\xac\x63\x4e\x36\x41\x4c\x95\xbb\xc7\x9e\x6f\x45\x59\x67\x16\x8d\x83\xaf\x79\x76\xc4\x1c\x83\xf8\x77\x7d\x83\x5a\xf3\xec\x3d\xea\x52\xee\x0a\xf3\x02\xb7\x3c\x3b\xd7\xd3\x2b\xd9\x71\x1f\x87\x24\x2b\x7c\xca\xb3\xcb\xd3\xc3\x83\x94\x1e\x43\x9f\x36\x58\xdd\x2e\x64\x3b\x3d\x67\x4a\x0a\x6e\x9d\x2f\x6e\xc1\xaf\x59\xe8\xe2\x6a\x6c\x7a\x95\x8b\x85\x6a\x5e\x4a\x24\x14\x48\xc7\xfa\xeb\x50\xe8\x66\x43\x52\x09\xdc\x18\x6d\x28\x6a\x5a\x01\x8f\x27\x90\x10\x08\xcd\xb3\x50\x07\x57\x3b\x76\xc7\x5f\x80\x6a\xb9\x22\x09\x84\xd2\x3c\xe3\xc6\x60\x56\x6c\x7c\xf5\x99\xb5\x77\x24\x50\x2a\xa1\xa8\x8b\x12\x90\x39\x51\xb1\x03\x25\x08\x09\xda\x56\x27\xb2\xe5\x67\x4a\x68\x4f\x2d\xd1\xf3\xff\x90\x64\x66\x1f\xa4\x6b\xe6\xfe\x67\xc3\x2c\xf7\x41\xaf\x26\xa0\x64\x3b\xce\xb3\x2c\x33\xdc\x2d\x8c\xc2\xd5\x14\x20\x64\x75\x66\x8f\xa4\x21\x74\x18\xa0\x64\x9b\x67\xd9\x53\x9e\x65\xa2\x04\x7d\x87\x3c\x03\xb5\x8a\x24\x55\x27\x97\xf4\x5a\xdd\xe4\x59\x26\x05\xbc\xd2\x77\xbe\x64\x4a\x17\x9d\xab\x8e\x91\x93\x20\x85\xd2\x61\x2b\x60\x6f\xcf\x16\x25\x28\x9a\x80\x55\x42\x4e\x4d\xf9\x21\xb8\x46\x2f\xda\x29\x28\xed\x40\x48\x35\x85\x9e\xb9\x39\x08\x6d\x9e\xa3\xc3\x04\xbb\x08\xff\x01\xa1\xf2\x2c\xbb\x67\x06\xa6\x38\x95\x69\x1c\x53\xa7\x96\xc8\x40\x54\x04\xe7\x99\xae\xfb\xf6\x26\xc9\x7c\x1f\xcf\x27\x9f\xa6\xce\x87\x3e\x85\xfe\x8f\x27\x80\xe7\xb6\xba\xe0\x0f\x9f\x38\x9b\x72\x43\xfc\xc1\x1e\x3c\x2f\xab\x66\x85\x10\x8f\x00\x6e\xbe\xd7\xb9\xde\x9c\x20\x77\x73\x7b\xbc\x8e\x0c\x49\x87\x5a\x13\x08\xc7\xbe\x42\xe4\xc3\xb6\x25\xe6\x27\x70\x36\x45\x6d\x48\xf1\x6d\x99\x00\x12\xf5\xf4\x62\x07\x9b\xc1\x79\x1d\x4f\x00\x6d\xa2\x3a\xe2\x8e\x37\x6e\x70\x92\x09\x26\xd3\x1d\x73\x17\xdd\xa7\x3a\x65\xf6\xa3\xe1\x42\x2e\xc9\x00\xaf\x84\x02\x2d\xae\x2e\x28\x7c\xfb\x06\xc3\x42\x93\x09\x14\xc5\x38\xca\x92\x58\x37\x01\x7d\x60\xd6\x9d\xa9\x29\x5f\x12\x1c\x9c\xa2\x2a\xe8\x3b\x90\xa8\x7a\x74\x10\x45\x6f\xe0\x40\xe7\xed\xe4\xb1\xe7\xbf\x3e\x1e\x2f\x1d\x57\x56\x6a\x45\x84\xba\x96\xe3\x1b\x9a\x9a\xf2\x14\xc6\xed\x19\x81\x00\xb8\x89\x57\xb0\xbe\x6f\x65\xc3\x9c\xd4\xaa\xd6\x8d\xe3\x6e\x64\x9d\xe1\xac\x2b\x22\x50\xf0\x81\x6b\xa1\x6e\x60\xb2\x69\x8c\x1e\x0d\x2d\x71\x9c\x4c\xcd\x6f\x2a\xae\x0e\x5a\x39\x1e\xf2\xf0\x2f\xa3\x3b\x86\x2c\x21\xab\xf8\x4c\xa8\x7f\x8b\x26\xb9\x02\xc4\x13\x72\xd9\x1b\xa9\x9c\x20\xc5\xde\xde\xb2\x28\x01\x6f\x8d\xea\x72\xd1\x85\x2d\xf2\x39\x48\x73\x78\xc0\x9f\x68\xbe\x63\x7c\xd6\x11\x65\x98\xa0\xa7\x3c\xad\xb1\x68\x4f\x98\x1d\x1c\xf9\xd2\x5f\x0a\xa7\x4c\x4d\x5b\x6e\x20\x84\x59\x70\x73\xbe\x36\x62\x7f\x44\x87\x97\x07\xcc\x43\x78\xf4\xe6\x0d\x08\xb2\x30\x6d\x38\xd3\x68\x7e\xf1\x2e\xac\xde\x87\xff\x34\x4e\x03\x0d\xd3\x98\xaa\x7e\xf5\x2a\x52\xe2\x64\xad\xa4\x67\x4a\x36\xa4\x18\x42\x42\xc3\x14\x9a\xc7\x2d\xc7\xa8\x82\x7a\x75\x49\xd6\xda\x91\xbf\x7f\x59\xec\xea\x58\xa8\xc3\x8d\xa1\xc3\x66\x0d\x39\x9e\xa0\x1a\x2f\xc9\x70\x1b\xde\x7c\xe2\xb6\xd7\xca\xf2\xcf\x46\x3a\x6e\x4a\x30\xfc\x0b\xbc\x89\x6f\xbe\x2c\xf0\x8e\xf0\xd8\x75\x0d\x33\xc3\x6e\x41\x2a\xa1\xd3\x94\x25\xe3\x8c\x23\x17\xf5\x11\xc3\xbf\xa4\x4e\x11\x4a\xb7\xbd\xd4\x43\x7b\x17\x45\x0e\x65\x20\x81\xbd\x5f\xd8\x2b\xcc\x18\x3c\x5f\x68\x77\xa2\x17\x6a\x4a\x37\xa2\x56\xab\x6b\x67\x8e\x33\x55\xd7\xd0\xcc\x79\x73\x07\x52\x8c\x3a\x3d\x95\x42\xf2\xe9\xc8\x4a\xd5\x70\x98\x7b\x17\x2c\xe1\x96\xc9\x16\xa4\x00\x74\xc2\xe0\x31\x52\x80\x5b\xb5\xdc\x5f\xfe\x1f\x99\xb1\x3c\xf0\xc0\x39\x3f\xd1\xa6\x63\xce\x37\xa6\x3a\xf5\x30\xd5\x6f\xdc\x91\xe2\x4c\x8c\xce\x53\x91\x4b\x2c\x52\x50\xfa\x2e\x38\x64\xd8\x92\xd7\xaf\xe3\x47\x4a\x3c\x30\xd5\xef\x4a\x2e\x09\x85\x5f\x26\xe0\xd2\xef\x78\xbd\xd8\xca\xb7\x3f\xc0\x6f\xb5\x20\x15\xa1\x50\xd7\xf0\x76\xff\xbf\xdf\x97\x7d\x26\x46\x17\x5a\xf1\xd1\x39\x43\x0f\xfc\x8e\x64\x60\x6a\x0a\x9d\x8f\xc0\xa3\x19\x3a\xb0\x43\xdb\x1a\xa9\xa0\xa8\x28\x48\xf1\x9f\x44\xff\x12\x69\x7f\x04\x7d\xb2\xcd\x03\x5e\x84\xa2\xd5\x25\x92\x88\xa6\x34\x42\x23\x2a\xca\x48\x60\xe0\x54\x74\x67\xd6\x11\x73\x18\xed\x77\xf2\x42\x3f\x10\x5a\x85\x0d\xdc\xde\x50\x7f\xfb\x61\xeb\x58\x33\xe7\x2f\xf3\xc0\x88\x11\x16\x36\xba\x2d\x4a\x28\xfa\xc5\x6d\x2b\x9b\x12\x94\x1e\x39\xc3\x94\x15\xda\x74\x25\x74\x6c\x39\x62\x33\x3e\x79\x7b\xf0\xbf\xb7\xff\xdf\xdf\xdf\x2f\x76\xf3\x3b\x5e\xf6\xd2\x70\xbb\x49\xf1\x70\x3a\x45\xde\xe4\xa0\x84\xfd\x12\xf6\x5f\xe4\xfc\x1c\x12\xef\xa4\xd5\x2c\xae\x3a\x95\xa6\xee\xa7\xa0\x8e\xaf\xd8\x6c\x85\x80\x9b\x1d\xbb\xf4\x80\x3b\x1d\xbe\x5c\x9c\x06\x13\x3d\x23\x1f\x8c\x01\x09\x39\x47\xe1\x22\x7e\xa2\xd1\x98\x93\x6f\x6d\x78\x72\xb0\xdf\xe4\xcc\xd1\x7f\xd7\x1f\xb3\x30\xf8\x78\x0d\xff\x70\xe4\xa2\x9d\x25\x57\x4c\xd9\xb1\xce\x27\x7e\xcf\x8d\xe5\x3b\xcb\x99\xf0\x6e\x77\xd9\xad\xc4\x1f\xac\x6e\xf8\xfd\x96\xc0\x8f\x68\xed\xcf\x45\xae\x3e\x0c\x15\xeb\xf8\x96\x52\x4c\x21\xb8\xbe\xba\x4f\xfe\x51\xed\x35\x86\xdf\x6c\x6a\x7e\x56\x79\xf3\xca\xdb\x2a\x3e\x48\xfa\xc1\xda\x86\xdf\xaf\xca\xfe\x1d\x00\x00\xff\xff\xd6\x94\x2b\xad\x4b\x0e\x00\x00"),
		},
		"/manifest.go.extra": &vfsgen۰FileInfo{
			name:    "manifest.go.extra",
			modTime: time.Date(2021, 3, 9, 1, 28, 4, 242234469, time.UTC),
			content: []byte("\x76\x61\x72\x20\x28\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x6d\x61\x6e\x69\x66\x65\x73\x74\x20\x3d\x20\x25\x23\x76\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x72\x65\x76\x20\x20\x20\x20\x20\x20\x3d\x20\x25\x23\x76\x0a\x29\x0a"),
		},
		"/package.json": &vfsgen۰CompressedFileInfo{
			name:             "package.json",
			modTime:          time.Date(2021, 3, 9, 1, 28, 4, 242248005, time.UTC),
			uncompressedSize: 174,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\xcb\xc2\x30\x10\xc6\xf1\x3d\x9f\xe2\x38\xc8\xf6\xae\xef\xd2\xc1\xc5\x76\x10\xa4\x8b\x38\x89\x43\xbd\x1c\x78\x50\x93\x78\x17\x75\x28\xfd\xee\x92\x08\x3a\x3e\xcf\xef\xbf\x38\x00\x8c\xd3\x8d\xb1\x03\x7f\xff\xab\x2b\xb0\x91\x4a\x2e\x92\xe2\xef\x9c\x85\x38\x5a\xad\xf0\x38\xee\x77\xdb\x61\x3c\x0c\x3d\x36\xca\x2a\xcf\xa9\x54\x2a\xfa\xe0\x76\x5d\x34\xbd\x8c\xd5\x66\xb1\x82\x1d\x9c\x1c\x00\x00\x6e\xe0\xdf\x7b\x74\x00\xe7\x16\xd1\x44\x57\xee\x45\x99\x4a\x52\x61\xab\xa1\xb7\x2f\x07\xce\x1c\x03\x47\xfa\xd0\xb2\xba\xd5\xbd\x03\x00\x00\xff\xff\x18\x68\x1c\x80\xae\x00\x00\x00"),
		},
		"/postcss.config.js": &vfsgen۰CompressedFileInfo{
			name:             "postcss.config.js",
			modTime:          time.Date(2021, 3, 9, 1, 28, 4, 242263274, time.UTC),
			uncompressedSize: 260,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x6e\xc3\x20\x14\x85\xe1\x9d\xa7\xb8\x1d\x22\xa0\x49\xcc\x4e\x9b\xb6\x4b\x9f\xc2\xf5\x80\xf0\xb5\x8d\x84\x01\xc3\x45\xb1\x94\xf8\xdd\x2b\xb5\xee\xd0\xcc\xdf\x39\xff\x1c\xfb\xea\xb1\xc1\x35\xc5\x4c\x05\x2e\x70\x63\x00\xc9\xd7\xd1\x85\xa2\xa1\x65\x00\x00\x19\x97\xea\x32\x0a\x4e\xc6\xf9\xab\x0b\xbd\x2d\x85\x4b\x71\x58\xe4\xe9\xbf\x9b\x4a\x31\x65\x1c\xdc\x8a\x99\x3f\xe2\xc7\x50\xbd\x9f\xea\x6c\x82\x4a\xb1\x90\x2d\xe5\x9c\x6a\x1e\xf1\x37\x76\xfb\x19\x03\xd8\x18\x08\x03\x69\x68\x0f\xcb\x91\xab\xe7\x66\xa2\xd9\xf3\xee\xb4\x73\x8f\x83\xa9\x9e\x3e\x57\xca\xc6\x52\xcc\x1a\xc4\xfe\x90\x70\x79\xfb\x7b\x37\xb3\x21\x3b\x09\xd5\x7e\x5d\xcf\x4a\x77\x47\xf1\xfe\xfa\xa4\xa5\x1a\x25\xdc\xef\xd0\xee\xb1\x4d\x32\x80\x8e\x6d\x2f\xec\x3b\x00\x00\xff\xff\x36\x10\x07\x50\x04\x01\x00\x00"),
		},
		"/sass.js": &vfsgen۰CompressedFileInfo{
			name:             "sass.js",
			modTime:          time.Date(2021, 3, 9, 1, 28, 4, 242282480, time.UTC),
			uncompressedSize: 2181,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x66\x2f\x2b\x1a\x71\x98\xcd\x35\xae\x0f\x41\xb0\x28\xd0\x6d\x37\x40\xd3\x9f\x83\x6b\x14\x5c\x79\x64\xb3\x4b\x91\xda\x21\xa5\xae\x10\xe8\xdd\x8b\x11\x29\x5b\x72\x1c\x04\xbd\xc4\x91\xe6\xe3\xf0\xfb\x21\x47\xad\x22\xb0\x18\x60\x0d\x84\xdf\x1a\x4d\x28\x72\x8b\x21\x5f\xac\x32\xae\x78\xe5\xfd\xac\xe4\x76\x78\xcd\x2f\x47\xc0\x0e\x95\xef\x6c\x31\xc5\xa4\x57\x8c\xc8\x74\x09\xe2\x5d\x4d\xae\x40\xef\x25\xda\x56\xde\x3f\x3d\x7d\xfc\xed\xc7\x8f\x9f\xff\x7e\x7a\x7c\xf8\xb4\x80\xe7\x0c\xa0\x70\xd6\x3b\x83\x12\x89\x1c\x89\x7c\xf8\xb9\xcb\x97\x90\xcf\xb0\xa0\x3d\x58\x17\xc0\x47\x72\x00\xc7\xae\xdf\x75\x10\xb7\x8b\x55\xd6\x67\xd9\xcd\x0d\xec\xdc\xaf\xf8\x0d\x3c\xda\x9d\x07\x35\x90\x42\x1f\x20\x38\x08\x07\x04\x5d\x17\x50\x28\x63\xbe\xa8\xe2\x2b\x78\xa4\x16\x49\x66\x65\x63\x8b\xa0\x9d\x8d\x4b\x45\xad\x48\x55\x7e\x79\xc4\x45\x92\xac\xb5\x30\xb0\x66\xaf\x64\x41\xa8\x02\x3e\x38\x6b\x71\x58\x29\x5e\x57\xc8\xfa\x8c\x74\x56\xe4\x45\x84\xe7\x4b\x18\x37\x14\xb1\x35\xc0\xcd\x0d\xa4\xea\xf0\x58\x18\xf9\x2f\xe9\x80\xe2\xa7\xa7\xc7\xcf\xd2\x07\xd2\x76\xaf\xcb\x2e\x31\x5b\xc0\x15\xe4\x7f\xd9\x68\x42\x3f\xfc\x4d\x3b\xec\x54\x50\xd3\xf6\xfc\x3c\xd9\x82\x1f\x87\xff\x59\x4b\x0d\x6b\x18\xda\xd7\x8a\x3c\x46\xe8\x6a\xa8\x72\x64\x35\xbc\x7f\x0f\x75\x4c\x64\xec\xf0\x7a\x50\x23\x70\x95\x70\x2f\x92\xe1\x97\x3d\xa0\xf1\x78\xea\xfe\xae\x96\x84\xbe\x31\xe1\x8d\xfe\x50\x69\xef\xb5\xdd\x43\x44\xe7\x6f\xec\x12\x0d\x4c\xd1\x89\xe3\x1e\xab\xd1\xd8\x1d\xfa\x40\xae\x13\x2f\xdd\x1b\xb6\x9b\xda\x87\x23\xb3\xf3\x65\xaf\x3b\x81\xa9\x7e\x81\x5b\x7f\x3c\xa1\x85\xb3\x2d\x1c\x94\xdd\x19\xf4\x40\x58\x34\xe4\x75\x8b\xa6\x1b\x0a\x48\x81\xc5\xaa\x78\xf3\x42\x57\xe3\xe4\x80\x32\x40\xb4\x91\x16\x1b\xd9\x82\xb6\x3e\x28\x5b\xa0\x2b\xe1\x9e\x48\x75\x23\x65\x8e\x98\x4f\x2b\x77\x91\xdc\xc5\xcb\x9f\xb5\x0f\xa2\x95\x06\xed\x3e\x1c\x12\xcf\xd2\x11\x08\xc6\x6a\x58\xc3\x87\x15\x68\xf8\x01\x46\xc8\x0a\xf4\xd5\xd5\x29\x1c\x23\x3d\x86\x3f\x94\x69\x50\xe8\x65\x62\xb2\xd1\xdb\xc5\xcc\x78\xc2\xd0\x90\x05\x93\xcd\xf2\x9e\xd1\x7c\xfc\xf2\x0f\x16\x61\xca\xf3\x2b\x76\x3c\x63\x62\x41\xf2\x93\x68\x53\x57\x2e\x57\x73\x19\xbf\xa8\x5a\x30\xe6\x6d\x21\x13\xd4\x99\x96\x8a\xb5\x7c\xc2\xee\xa8\x84\xa1\x13\x31\x09\x71\xae\x36\xa1\x2e\x6b\xae\x86\x90\xd3\xa4\x08\x1d\xdf\x2f\x26\xec\x4a\x68\xb9\x92\x50\x27\x21\x9b\xd0\xd5\xb2\x38\x28\xba\x0f\xe2\xc3\x42\x06\xf7\x7b\x5d\x23\x3d\x28\x8f\x82\x6f\x38\x57\xbd\xd1\x05\x8a\xdb\xc5\x76\xf0\x63\x1c\x6f\x0f\xca\x18\xa8\x91\x4a\x47\x15\x8f\x38\x3e\xec\x6f\x0e\x36\x5e\x24\x4a\x1b\x2d\x48\x5c\x5e\x8c\x21\x66\xae\x68\xcf\x61\x6c\xb6\xaf\xfb\xaa\x68\xdf\x54\x68\xc3\x68\x2e\x5c\xc3\xed\x99\xc1\xdc\x65\xa3\xb7\xb0\x3e\x81\x37\x7a\x2b\xf7\xa3\xa7\x33\x03\x87\xcf\x88\xb3\x08\x6b\x28\x95\xf1\x78\x8a\x9e\x86\xef\x92\x6d\x8c\x89\xef\xe2\x80\x7e\x66\xff\xe0\x0e\x72\x16\xcc\xe3\x67\x18\x8b\x70\x07\xcf\x56\x55\x5c\x28\xed\x32\xea\xb8\x1b\x7e\xfa\x7e\x72\xa9\x27\xe3\x2c\x76\xa7\x31\xf2\x44\x21\x50\x93\x18\xf4\x89\x65\xfa\x9e\x49\xe3\x5c\xfd\xe7\x41\x1b\x14\x53\xe7\x46\x37\xdf\xf1\xfa\xd5\x71\x51\x7a\x3b\x9c\x1c\xc2\x38\x80\xfa\x31\xc4\x3d\x86\x53\x5a\x46\xfb\x90\xbd\xf4\xe0\x4c\x2b\xa3\xae\xc7\x7d\x7d\x7e\x41\x52\xe5\x76\x0d\x8f\xa4\xef\xb5\xa3\xc0\x19\x3e\xf7\xbc\xe9\xa5\x04\xe9\xd2\xb5\x60\x4c\x69\xd9\x91\x8d\x4e\xe9\xcf\x5b\x6e\x4a\xcb\x89\x9e\x0e\xd3\x78\xe2\x67\xce\xb1\x01\xff\xdb\xb1\xff\x02\x00\x00\xff\xff\xd7\x1c\x06\x73\x85\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/_assetgen.scss"].(os.FileInfo),
		fs["/assets.anko"].(os.FileInfo),
		fs["/gitignore"].(os.FileInfo),
		fs["/manifest.go"].(os.FileInfo),
		fs["/manifest.go.extra"].(os.FileInfo),
		fs["/package.json"].(os.FileInfo),
		fs["/postcss.config.js"].(os.FileInfo),
		fs["/sass.js"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
