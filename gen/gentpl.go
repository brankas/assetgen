// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// files statically implements the virtual filesystem provided to vfsgen.
var files = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/assets.anko": &vfsgen۰FileInfo{
			name:    "assets.anko",
			modTime: time.Date(2019, 1, 4, 2, 46, 6, 903803284, time.UTC),
			content: []byte("\x23\x20\x67\x65\x6e\x65\x72\x61\x74\x65\x64\x20\x70\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x73\x63\x72\x69\x70\x74\x0a\x0a\x23\x20\x6a\x73\x28\x22\x6a\x73\x2f\x61\x70\x70\x2e\x6a\x73\x22\x2c\x20\x2e\x2e\x2e\x29\x0a"),
		},
		"/gitignore": &vfsgen۰FileInfo{
			name:    "gitignore",
			modTime: time.Date(2019, 1, 4, 2, 46, 6, 903833050, time.UTC),
			content: []byte("\x2f\x61\x73\x73\x65\x74\x73\x2e\x67\x6f\x0a\x2f\x6d\x61\x6e\x69\x66\x65\x73\x74\x2e\x67\x6f\x0a\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2e\x67\x6f\x0a\x2f\x67\x65\x6f\x69\x70\x2f\x67\x65\x6f\x69\x70\x2e\x67\x6f\x0a\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x73\x2f\x2a\x2e\x68\x74\x6d\x6c\x2e\x67\x6f\x0a\x2a\x2e\x6d\x6f\x0a"),
		},
		"/manifest.go": &vfsgen۰CompressedFileInfo{
			name:             "manifest.go",
			modTime:          time.Date(2019, 1, 4, 2, 46, 6, 903878412, time.UTC),
			uncompressedSize: 3579,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6e\xdb\xb8\x12\xbe\x96\x9e\x62\x2a\x20\x05\xd9\x23\x4b\x09\x7a\xce\xb9\x48\xd7\x17\xd9\x26\xd9\x04\x68\x82\xa2\xc9\xa2\x17\x41\x2e\x18\x89\xb4\x89\x48\xa4\x4b\xd2\x89\xb3\x45\xde\x69\xdf\x67\x5f\x66\x31\xfc\xb1\x25\xd7\xcd\xb6\xc0\xfa\xc6\x12\x35\xf3\xcd\xf7\x0d\x87\x9f\xb4\x60\xcd\x3d\x9b\x71\x60\xd6\x72\x67\xf3\x5c\xf6\x0b\x6d\x1c\x90\x3c\x2b\xee\x9e\x1c\xb7\x45\x9e\x15\x8d\xee\x17\x86\x5b\x5b\xcf\xfe\x90\x8b\xb0\xa0\x1c\x5f\x39\x7f\x69\x9e\x16\x4e\xd7\x76\xce\x0e\xf0\x56\xf4\x7e\x55\xea\x5a\xea\xa5\x93\x1d\xde\xf4\xb2\xe7\xf8\xaf\xb8\xab\xe7\xce\x79\x04\xed\x81\xad\x33\x52\xcd\xfc\xa5\xf3\x41\x79\x56\xcc\xa4\x9b\x2f\xef\xaa\x46\xf7\xb5\x9d\x2f\x4d\xa3\xf5\x07\x9f\x25\x6c\xfd\x20\x6c\xc0\xa4\x79\x5e\xd7\xf0\x20\xec\x8c\xab\xbf\xfe\x3c\x42\xea\x20\x2d\x30\xb0\x8e\x39\xd9\x04\x31\x55\xee\x9e\x16\x7c\x2b\xca\x3a\xb3\x6c\x1c\x7c\xcd\xb3\x63\xe6\x18\xc4\xdf\xcd\x2d\x6a\xcd\xb3\xf7\xa8\x4b\xb9\x6b\xcc\x0b\xdc\xf2\xec\x42\xb7\xd7\xb2\xe7\x3e\x0e\x49\x56\x78\x97\x67\x57\x67\x47\x07\x29\x3d\x86\x3e\x8f\x58\xdd\x2d\x65\xd7\x5e\x30\x25\x05\xb7\xce\x17\xb7\xe0\xd7\x2c\xf4\x71\x35\x36\xbd\xca\xc5\x52\x35\x2f\x25\x12\x0a\xa4\x67\x8b\x9b\x50\xe8\x76\x24\xa9\x04\x6e\x8c\x36\x14\x35\xad\x81\x0f\xa7\x90\x10\x08\xcd\xb3\x50\x07\x57\x7b\x76\xcf\x5f\x80\xea\xb8\x22\x09\x84\xd2\x3c\xe3\xc6\x60\x56\x6c\x7c\xf5\x99\x75\xf7\x24\x50\x2a\xa1\xa8\x8b\x12\x90\x39\x51\xb1\x03\x25\x08\x09\xda\x56\xa7\xb2\xe3\xe7\x4a\x68\x4f\x2d\xd1\xf3\x7f\x48\x32\xb3\x8f\xd2\x35\x73\x7f\xd9\x30\xcb\x7d\xd0\xab\x29\x28\xd9\x1d\xe6\x59\x96\x19\xee\x96\x46\xe1\x6a\x0a\x10\xb2\x3a\xb7\xc7\xd2\x10\x3a\x0c\x50\xb2\xcb\xb3\xec\x39\xcf\xb3\x4c\x94\xa0\xef\x91\x68\xe0\x56\x91\x24\xeb\xf4\x8a\xde\xa8\xdb\x3c\xcb\xa4\x80\x57\xfa\xde\xd7\x4c\xf9\xa2\x77\xd5\x09\x92\x12\xa4\x50\x3a\xec\x05\xec\xed\xd9\xa2\x04\x45\xd7\xc8\x2a\x41\xa7\xb6\xfc\x10\x5e\xa3\x97\x5d\x0b\x4a\x3b\x10\x52\xb5\xb0\x60\x6e\x0e\x42\x9b\x31\x3c\xa2\xc3\x14\xfb\x08\xff\x01\xa1\xb0\xdc\x03\x33\xd0\xe2\x60\xa6\x89\x4c\xcd\x5a\x21\x05\x51\x11\x1c\x69\xba\x69\xdd\x9b\x24\xf4\x7d\x3c\xa2\xbc\x4d\xcd\x0f\xad\x0a\x5b\x70\x38\x05\x3c\xba\xd5\x25\x7f\xfc\xc4\x59\xcb\x0d\xf1\x67\x7b\x70\xbf\xaa\x9a\x35\x42\x3c\x05\xb8\xff\x5e\xe8\x66\x7f\x82\xde\xf1\x0e\x79\x21\x19\x92\x0e\xb5\xa6\x10\x4e\x7e\x85\xc8\x47\x5d\x47\xcc\x4f\xe0\x8c\x45\x8d\xa4\xf8\xb6\x4c\x01\x89\x7a\x7a\x69\x87\x9a\xc1\x99\x3d\x9c\x02\x5a\x45\x75\xcc\x1d\x6f\xdc\xe0\x34\x13\xcc\xa6\x3b\x66\x2f\x3a\x50\x75\xc6\xec\x47\xc3\x85\x5c\x91\x01\x5e\x09\x05\xda\x5c\x5d\x84\xb9\x93\x02\x24\x96\x48\x39\x1f\x98\x75\xe7\xaa\xe5\x2b\x82\x53\x52\x54\x05\x7d\x07\x12\x15\x4e\x0e\xa2\xc0\x21\xb7\x29\xf4\xde\x3d\x9e\x16\xfc\xd7\xa7\x93\x95\xe3\xca\x4a\xad\x88\x50\x37\xf2\xf0\x96\xa6\x06\x78\x49\xe1\xb8\xde\x08\x75\x0b\xd3\xb1\x7f\x79\x58\x74\xae\xc3\xe4\x3d\xbe\xf1\xb8\x3a\x50\x7b\x08\x43\x11\xf8\x30\x9a\x58\xc8\x12\xb2\x8a\xf7\x84\xfa\xa7\xe8\x65\x6b\x40\x1c\xe3\xab\x85\x91\xca\x09\x52\xec\xed\xad\x8a\x12\xd0\xdc\xab\xab\x65\x1f\xba\xe8\x73\x3c\xcf\xe1\x41\x7c\xa6\xf9\x8e\x3d\xde\x44\x94\x61\x9b\x31\x2f\x2e\xb2\xe8\x23\x98\x1e\xac\xf3\xca\xbb\xf7\x19\x53\x6d\xc7\x0d\x84\x30\x0b\x6e\xce\x37\x8e\xe9\x4f\xd2\xd0\xe5\x61\x1e\xc2\xa3\x89\x8e\x20\xc8\xd2\x74\xe1\xe8\xa1\x4b\xc5\x97\x56\xf5\x3e\xfc\xd3\xb8\x8f\x34\x8c\x4c\xaa\xfa\xd5\xcb\x48\x89\xd3\x8d\x94\x05\x53\xb2\x21\xc5\x10\x12\x1a\xa6\xf0\x8c\xdf\x71\x8c\x2a\x68\x90\x97\x74\x6d\xbc\xf3\xfb\xb6\xbe\xab\x67\xa1\x10\x37\x86\x8e\xda\x35\x64\x79\x8a\x7a\xbc\x28\xc3\x6d\x78\xf2\x89\xdb\x85\x56\x96\x7f\x36\xd2\x71\x53\x82\xe1\x5f\xe0\x4d\x7c\xf2\x65\x89\x76\xee\xc1\xeb\x1a\x66\x86\xdd\x81\x54\x42\xa7\x49\x4b\x0e\x17\xc7\x2e\x2a\x24\x86\x7f\x49\xbd\x22\x94\x6e\x9b\x9e\x87\xf6\x76\x87\x1c\xca\x40\x02\xbb\xbf\xb4\xd7\x98\x31\xb8\xbf\xd4\xee\x54\x2f\x55\x4b\x47\x51\xeb\xd5\x8d\x85\xa6\xb9\xaa\x6b\x68\xe6\xbc\xb9\x07\x29\x26\xbd\x6e\xa5\x90\xbc\x9d\x58\xa9\x1a\x0e\x73\x6f\x57\x25\xdc\x31\xd9\x81\x14\x80\x96\x15\xcc\x40\x0a\x70\xeb\xa6\xfb\x17\xf5\x47\x66\x2c\x0f\x44\x70\xd8\x4f\xb5\xe9\x99\xf3\x9d\xa9\xce\x3c\x4c\xf5\x1b\x77\xa4\x38\x17\x93\x8b\x54\xe4\x0a\x8b\x14\x94\xbe\x0b\x56\x16\x36\xe5\xf5\xeb\xf8\x41\x11\x4f\x4d\xf5\xbb\x92\x2b\x42\xe1\x97\x29\xb8\x74\x1d\x5f\x04\xb6\xf2\xfd\x0f\xf0\x5b\x3d\x48\x45\x28\xd4\x35\xbc\xdd\xff\xef\x0b\xba\xcf\xc5\xe4\x52\x2b\x3e\xb9\x60\x68\x56\xdf\xd1\x0c\x4c\xb5\xd0\xfb\x08\x3c\xa0\xa1\x05\x3b\xc4\x6d\x90\x0a\x8a\x92\x82\x16\xff\xfd\xf2\x6f\xb1\xf6\xe7\xd0\x67\xdb\x3c\x00\x46\x2c\x5a\x5d\x21\x8b\xe8\x4d\x13\xf4\xa3\xa2\x8c\x0c\x06\x86\x45\x77\x66\x1d\x33\x87\xd1\x7e\x2f\x2f\xf5\x23\xa1\x55\xd8\xc2\xed\x2d\xa5\x34\x35\x8f\x35\x73\xfe\x32\x11\x8c\x98\x60\x65\xa3\xbb\xa2\x84\x62\xb1\xbc\xeb\x64\x53\x82\xd2\x13\x67\x98\xb2\x42\x9b\xbe\x84\x9e\xad\x26\x6c\xc6\xa7\x6f\x0f\xfe\xf7\xf6\xff\xfb\xfb\xfb\xc5\x6e\x82\x27\xab\x85\x34\xdc\x8e\x39\x1e\xb5\x2d\x12\x27\x07\x25\xec\x97\xb0\xff\x02\xe9\x5d\x90\xf8\x4e\x59\x8f\xe3\xba\x55\x69\xf0\x7e\x0a\xea\xe4\x9a\xcd\xd6\x08\xb8\xdd\xa9\x4d\x8f\xb8\xd9\xe1\x33\xc3\x69\x30\xd1\x38\xf2\xc1\x24\x90\x90\x74\x1c\x5e\x9a\xcf\x34\xfa\x73\x72\xaf\x91\x35\x07\x17\x4e\x06\x1d\x6d\x78\xf3\xf1\x09\x83\x8f\xcd\xf0\x87\x53\x17\x3d\x2d\x79\x63\xca\x8e\x75\x3e\xf1\x07\x6e\x2c\xdf\x59\xce\x84\x67\xbb\xcb\x6e\x25\xfe\x60\x75\xc3\x1f\xb6\x04\x7e\x44\x87\xff\x56\xe4\xfa\x33\x4e\xb1\x9e\x6f\x29\xc5\x14\x82\xeb\xeb\xd7\xca\x3f\xaa\xbd\xc1\xf0\xdb\xb1\xe6\x6f\x2a\x8f\xdf\x7c\x5b\xc5\x07\x49\x3f\x58\xdb\xf0\x87\x75\xd9\xbf\x03\x00\x00\xff\xff\x25\x3b\x6b\xd4\xfb\x0d\x00\x00"),
		},
		"/manifest.go.extra": &vfsgen۰FileInfo{
			name:    "manifest.go.extra",
			modTime: time.Date(2019, 1, 4, 2, 46, 6, 903901497, time.UTC),
			content: []byte("\x76\x61\x72\x20\x28\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x6d\x61\x6e\x69\x66\x65\x73\x74\x20\x3d\x20\x25\x23\x76\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x72\x65\x76\x20\x20\x20\x20\x20\x20\x3d\x20\x25\x23\x76\x0a\x29\x0a"),
		},
		"/package.json": &vfsgen۰CompressedFileInfo{
			name:             "package.json",
			modTime:          time.Date(2019, 1, 4, 2, 46, 6, 903927293, time.UTC),
			uncompressedSize: 174,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\xcb\xc2\x30\x10\xc6\xf1\x3d\x9f\xe2\x38\xc8\xf6\xae\xef\xd2\xc1\xc5\x76\x10\xa4\x8b\x38\x89\x43\xbd\x1c\x78\x50\x93\x78\x17\x75\x28\xfd\xee\x92\x08\x3a\x3e\xcf\xef\xbf\x38\x00\x8c\xd3\x8d\xb1\x03\x7f\xff\xab\x2b\xb0\x91\x4a\x2e\x92\xe2\xef\x9c\x85\x38\x5a\xad\xf0\x38\xee\x77\xdb\x61\x3c\x0c\x3d\x36\xca\x2a\xcf\xa9\x54\x2a\xfa\xe0\x76\x5d\x34\xbd\x8c\xd5\x66\xb1\x82\x1d\x9c\x1c\x00\x00\x6e\xe0\xdf\x7b\x74\x00\xe7\x16\xd1\x44\x57\xee\x45\x99\x4a\x52\x61\xab\xa1\xb7\x2f\x07\xce\x1c\x03\x47\xfa\xd0\xb2\xba\xd5\xbd\x03\x00\x00\xff\xff\x18\x68\x1c\x80\xae\x00\x00\x00"),
		},
		"/sass.js": &vfsgen۰CompressedFileInfo{
			name:             "sass.js",
			modTime:          time.Date(2019, 1, 4, 2, 46, 6, 903966831, time.UTC),
			uncompressedSize: 1679,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe2\x3a\x10\x7d\xcf\xaf\x98\xbe\x34\x46\xa5\xa6\x7d\x25\x97\x87\x0a\x55\x57\xba\x57\x6a\xa5\x65\x3f\x1e\x58\xb4\xf2\x26\x13\xb0\xd6\xd8\xe9\xd8\xe9\x16\xa1\xfc\xf7\xd5\xc4\x09\x84\xd2\xaa\xda\x17\x42\x3c\x67\x66\xce\x9c\x39\xf1\xb3\x22\xb0\x18\x60\x06\x84\x4f\xb5\x26\x14\xa9\xc5\x90\x8e\xb2\x84\x23\x5e\x79\x7f\x12\x72\x05\x5e\xf3\x61\x0f\x28\x50\xf9\x9d\xcd\x87\x98\xee\x88\x11\x89\x2e\x41\x5c\x54\xe4\x72\xf4\x5e\xa2\x7d\x96\x77\x8b\xc5\xfd\xe7\x7f\xef\x1f\x7e\x2c\x1e\xe7\xff\x8f\x60\x9f\x00\xe4\xce\x7a\x67\x50\x22\x91\x23\x91\xb6\x8f\x69\x3a\x86\xf4\x04\x0b\xda\x83\x75\x01\x7c\x24\x07\x70\xa8\xfa\xa2\x83\xb8\x1d\x65\x49\x93\x24\x93\x09\x14\xee\x13\x3e\x81\x47\x5b\x78\x50\x2d\x29\xf4\x01\x82\x83\xb0\x41\xd0\x55\x0e\xb9\x32\xe6\xa7\xca\x7f\x81\x47\x7a\x46\x92\x49\x59\xdb\x3c\x68\x67\x63\xaa\xa8\x14\xa9\xad\x1f\x1f\x70\x91\x24\xcf\x9a\x1b\x98\xb1\x56\x32\x27\x54\x01\xe7\xce\x5a\x6c\x33\xc5\xfb\x13\xf2\x7c\x46\x3a\x2b\xd2\x3c\xc2\xd3\x31\xf4\x0d\x45\x2c\x0d\x30\x99\x40\x17\x6d\x5f\x73\x23\x7f\x93\x0e\x28\xfe\x5b\x3c\x3e\x48\x1f\x48\xdb\xb5\x2e\x77\x1d\xb3\x11\x5c\x41\xfa\xdd\x46\x11\x9a\xf6\xb7\xeb\x50\xa8\xa0\x86\xe5\xf9\x7d\xd0\x82\x5f\xdb\xff\x3c\x4b\x05\x33\x68\xcb\x57\x8a\x3c\x46\x68\xd6\x46\x79\x65\x15\x5c\x5e\x42\x15\x37\xd2\x57\x78\x7f\x51\x3d\x30\xeb\x70\x67\x9b\xe1\xc3\x06\xd0\x78\x3c\x56\xbf\xa8\x24\xa1\xaf\x4d\xf8\xa0\x3e\x6c\xb5\xf7\xda\xae\x21\xa2\xd3\x0f\xba\x44\x01\xbb\xd5\x89\x43\x8f\xac\x17\xb6\x40\x1f\xc8\xed\xc4\xb9\x7a\x6d\xbb\xa1\x7c\xd8\x33\x7b\x9d\xf6\xbe\x12\xd8\xc5\xdf\xe0\xd6\x0c\x1c\x3a\x57\xc6\x40\x85\x54\x3a\xda\xb2\x4b\x99\xef\x87\xde\xe4\x24\x51\xda\x48\x8a\x30\xd4\x64\xcf\x9d\xc4\xab\x55\xb4\xe6\x6f\x76\xb9\x8a\x5c\x4a\x47\x20\xf8\x5c\xc3\x0c\x6e\x32\xd0\xf0\x0f\x43\xea\x2d\xda\xe0\xa5\x41\xbb\x0e\x1b\xb8\x86\xdb\x0c\xf4\xd5\xd5\x71\x19\x5c\x65\xa9\x57\x30\x3b\x82\x97\x7a\x25\xd7\x18\xbe\x2a\x53\xa3\x38\x08\x7e\xe8\x5b\x38\x8b\x30\x83\x52\x19\x8f\xd9\xe1\x94\xda\xbb\xc5\xd6\xc6\xc4\xb3\xf8\x91\xed\xc3\xae\x42\x98\x42\xca\x13\xb3\x85\x5a\x6b\xc3\x14\xf6\x56\x6d\x39\x50\xda\x71\x1c\x64\xda\x3e\x9a\x66\xb0\x98\x81\x25\x63\x75\xea\x3d\xd1\x51\x08\x54\x77\x0c\x9a\x8e\x66\x77\x27\x49\xe3\x5c\xf5\x6d\xa3\x0d\x8a\xa1\x74\xbd\x9c\x17\x9c\x9f\xb5\x49\x6d\x56\xb0\x5c\x6c\x57\xa1\x2b\x19\x12\x4b\x75\x58\xbe\x04\x25\xc7\xfc\x32\x58\x99\x6f\x14\xdd\x05\x71\x33\x92\xc1\x7d\xa9\x2a\xa4\xb9\xf2\x28\xf8\x53\x0d\x56\x7a\xa3\x73\x14\xb7\xa3\x95\x20\x8c\x56\x6c\x7a\x2f\xac\x31\x1c\x97\x6e\xb4\x0f\xc9\xb9\x92\xaf\x14\x63\xd4\x75\xcf\xde\xa7\x6f\x08\xb3\x75\x45\xcd\xe6\x7c\xa9\x1c\x05\xb6\xc2\xbe\xe1\xa6\x6f\x19\x81\x3a\x03\x9c\x2c\x9f\x31\x25\x8f\x4e\x4b\xdd\x99\xe8\xb4\xe4\xb2\xb4\x6c\x8c\xa3\x27\xdb\x99\x92\x57\xfa\xb3\x8c\x7f\xad\xfb\x9f\x00\x00\x00\xff\xff\xa9\x7c\x25\x5f\x8f\x06\x00\x00"),
		},
		"/yarnrc": &vfsgen۰FileInfo{
			name:    "yarnrc",
			modTime: time.Date(2019, 1, 4, 2, 46, 6, 903989302, time.UTC),
			content: []byte("\x2d\x2d\x6d\x6f\x64\x75\x6c\x65\x73\x2d\x66\x6f\x6c\x64\x65\x72\x20\x25\x71\x0a\x2d\x2d\x2a\x2e\x6e\x6f\x2d\x62\x69\x6e\x2d\x6c\x69\x6e\x6b\x73\x20\x74\x72\x75\x65\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/assets.anko"].(os.FileInfo),
		fs["/gitignore"].(os.FileInfo),
		fs["/manifest.go"].(os.FileInfo),
		fs["/manifest.go.extra"].(os.FileInfo),
		fs["/package.json"].(os.FileInfo),
		fs["/sass.js"].(os.FileInfo),
		fs["/yarnrc"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
