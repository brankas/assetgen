// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// files statically implements the virtual filesystem provided to vfsgen.
var files = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/assets.anko": &vfsgen۰FileInfo{
			name:    "assets.anko",
			modTime: time.Date(2019, 1, 4, 2, 24, 51, 963220427, time.UTC),
			content: []byte("\x23\x20\x67\x65\x6e\x65\x72\x61\x74\x65\x64\x20\x70\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x73\x63\x72\x69\x70\x74\x0a\x0a\x23\x20\x6a\x73\x28\x22\x6a\x73\x2f\x61\x70\x70\x2e\x6a\x73\x22\x2c\x20\x2e\x2e\x2e\x29\x0a"),
		},
		"/gitignore": &vfsgen۰FileInfo{
			name:    "gitignore",
			modTime: time.Date(2019, 1, 4, 2, 24, 51, 963242808, time.UTC),
			content: []byte("\x2f\x61\x73\x73\x65\x74\x73\x2e\x67\x6f\x0a\x2f\x6d\x61\x6e\x69\x66\x65\x73\x74\x2e\x67\x6f\x0a\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2e\x67\x6f\x0a\x2f\x67\x65\x6f\x69\x70\x2f\x67\x65\x6f\x69\x70\x2e\x67\x6f\x0a\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x73\x2f\x2a\x2e\x68\x74\x6d\x6c\x2e\x67\x6f\x0a\x2a\x2e\x6d\x6f\x0a"),
		},
		"/manifest.go": &vfsgen۰CompressedFileInfo{
			name:             "manifest.go",
			modTime:          time.Date(2019, 1, 4, 2, 24, 51, 963276840, time.UTC),
			uncompressedSize: 3366,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6e\xdb\x36\x14\xbe\x96\x9e\xe2\x54\x40\x0a\xb2\x93\xa5\x04\xdd\x76\x91\xcd\x17\x41\xd3\xac\x01\x9a\xa0\xa8\x33\xf4\x22\xc8\x05\x2d\x91\x36\x11\x89\x74\x49\x2a\x71\x57\xf4\x9d\xf6\x3e\x7b\x99\xe1\xf0\xc7\xb6\x5c\x37\x6b\x81\xe5\x26\x16\x7d\xce\x77\xbe\xef\xf0\x9c\x4f\x5e\xb1\xe6\x9e\x2d\x38\x30\x6b\xb9\xb3\x79\x2e\xfb\x95\x36\x0e\x48\x9e\x15\xf3\x4f\x8e\xdb\x22\xcf\x8a\x46\xf7\x2b\xc3\xad\xad\x17\x7f\xc9\x55\x38\x50\x8e\xaf\x9d\xff\x68\x3e\xad\x9c\xae\xed\x92\x9d\xe0\xa3\xe8\xfd\xa9\xd4\xb5\xd4\x83\x93\x1d\x3e\x28\xee\xea\xa5\x73\x3e\x53\x7b\x40\x27\x7b\x5e\xe4\x79\x56\x2c\xa4\x5b\x0e\xf3\xaa\xd1\x7d\x6d\x97\x83\x69\xb4\x7e\xeb\x43\x85\xad\x1f\x84\x0d\x00\x34\xcf\xeb\x1a\x1e\x84\x5d\x70\xf5\xcf\xdf\x67\xc8\x13\xa4\x05\x06\xd6\x31\x27\x9b\xc0\xbc\xca\xdd\xa7\x15\xdf\x8b\xb2\xce\x0c\x8d\x83\xcf\x79\x76\xce\x1c\x83\xf8\x77\x7b\x87\xc2\xf2\xec\x15\x8a\x50\xee\x06\xf3\xac\x33\x52\x2d\xf2\xec\x4a\xb7\x37\xb2\xe7\x3e\x0e\x49\x56\xf8\x94\x67\xb3\x37\x67\x27\x29\x3d\x86\x7e\x19\xb1\x9a\x0f\xb2\x6b\xaf\x98\x92\x82\x5b\xe7\x8b\x5b\xf0\x67\x16\xfa\x78\x1a\x3b\x5c\xe5\x62\x50\xcd\x53\x89\x84\x02\xe9\xd9\xea\x36\x14\xba\x1b\x49\x2a\x81\x1b\xa3\x0d\x45\x4d\x1b\xe0\xd3\x29\x24\x04\x42\xf3\x2c\xd4\xc1\xd3\x9e\xdd\xf3\x27\xa0\x3a\xae\x48\x02\xa1\x34\xcf\xb8\x31\x98\x15\x1b\x5f\x7d\x60\xdd\x3d\x09\x94\x4a\x28\xea\xa2\x04\x64\x4e\x54\xec\x40\x09\x42\x82\xb6\xd5\x85\xec\xf8\xa5\x12\xda\x53\x4b\xf4\xfc\x3f\x24\x99\xd9\x47\xe9\x9a\xa5\xff\xd8\x30\xcb\x7d\xd0\xb3\x29\x28\xd9\x9d\xe6\x59\x96\x19\xee\x06\xa3\xf0\x34\x05\x08\x59\x5d\xda\x73\x69\x08\xdd\x0d\x50\xb2\xcb\xb3\xec\x4b\x9e\x67\x99\x28\x41\xdf\x23\xd1\xc0\xad\x22\x49\xd6\xc5\x8c\xde\xaa\xbb\x3c\xcb\xa4\x80\x67\xfa\xde\xd7\x4c\xf9\xa2\x77\xd5\x6b\x24\x25\x48\xa1\x74\xb8\x0b\x38\x3a\xb2\x45\x09\x8a\x6e\x90\x55\x82\x4e\x6d\xf9\x2e\xbc\x46\x0f\x5d\x0b\x4a\x3b\x10\x52\xb5\xb0\x62\x6e\x09\x42\x9b\x31\x3c\xa2\xc3\x14\xfb\x08\x3f\x81\x50\x58\xee\x81\x19\x68\x71\x30\xd3\x44\xa6\x66\xad\x91\x82\xa8\x08\x8e\x34\xdd\xb6\xee\x45\x12\xfa\x2a\xee\x23\x6f\x53\xf3\x43\xab\xc2\x15\x9c\x4e\x01\xf7\xb4\xba\xe6\x8f\xef\x39\x6b\xb9\x21\x7e\x91\x77\x9e\xd7\x55\xb3\x41\x88\x5b\x80\xf7\xef\x85\x6e\xef\x27\xe8\x1d\xdf\x90\x17\x92\x21\xe9\x50\x6b\x0a\x61\xcd\x2b\x44\x3e\xeb\x3a\x62\x7e\x00\x67\x2c\x6a\x24\xc5\xb7\x65\x0a\x48\xd4\xd3\x4b\x37\x14\x66\xfb\x56\xa8\x3b\x98\x8e\x97\xdd\x17\xc1\x35\x3f\x4d\x8b\xea\x59\xe2\xe9\xce\xa2\x9f\x02\xba\x4b\x75\xce\x1d\x6f\xdc\xce\x39\xc1\x60\xea\xa3\xa3\x05\x04\x18\x21\xab\xf8\x4c\xc2\xb7\xe8\x04\x9b\x0a\x38\x04\xb3\x95\x91\xca\x09\x52\x1c\x1d\xad\x8b\x12\xd0\x07\xab\xd9\xd0\x07\x40\x9f\xe3\x89\xef\x8e\xf1\x17\x9a\x1f\xe8\xd0\x36\xa2\x0c\x4d\xc2\xbc\x78\xc8\xe2\x16\x62\x7a\x30\x9e\x99\xf7\xbe\x37\x4c\xb5\x1d\x37\x10\xc2\x2c\xb8\x25\xdf\xfa\x8d\x9f\xc3\x5d\x8f\x84\x65\x08\x8f\x16\x34\x82\x20\x83\xe9\xc2\xe0\xe2\x8e\x47\x7f\xaf\x5e\x85\xff\x34\xae\x3c\x0d\xdd\x4b\x55\x3f\x7b\x19\x29\x71\xba\x95\xb2\x62\x4a\x36\xa4\xd8\x85\x84\x86\x29\xdc\x90\x39\xc7\xa8\x82\x06\x79\x49\xd7\xd6\x79\xbe\x6d\x8a\x87\x7a\x16\x0a\x71\x63\xe8\xa8\x5d\xbb\x2c\x2f\x50\x8f\x17\x65\xb8\x0d\xdf\xbc\xe7\x76\xa5\x95\xe5\x1f\x8c\x74\xdc\x94\x60\xf8\x47\x78\x11\xbf\xf9\x38\xa0\x19\x7a\xf0\xba\x86\x85\x61\x73\x90\x4a\xe8\x34\x7a\xc9\x1f\xe2\x1c\x46\x85\xc4\xf0\x8f\xa9\x57\x84\xd2\x7d\xcb\xf0\xd0\xde\x2c\x90\x43\x19\x48\x60\xf7\x07\x7b\x83\x19\x3b\xcf\xd7\xda\x5d\xe8\x41\xb5\x74\x14\xb5\x39\xdd\x1a\x50\x9a\xab\xba\x86\x66\xc9\x9b\x7b\x90\x62\xd2\xeb\x56\x0a\xc9\xdb\x89\x95\xaa\xe1\xb0\xf4\xcb\x5e\xc2\x9c\xc9\x0e\xa4\x00\x5c\xf8\xb0\x4a\x52\x80\xdb\x34\xdd\xbf\xe6\xde\x31\x63\x79\x20\x82\xc3\x7e\xa1\x4d\xcf\x9c\xef\x4c\xf5\xc6\xc3\x54\x7f\x70\x47\x8a\x4b\x31\xb9\x4a\x45\x66\x58\xa4\xa0\xf4\xb7\x60\x04\xe1\x52\x9e\x3f\x8f\xaf\xe3\xb8\x35\xd5\x9f\x4a\xae\x09\x85\xdf\xa7\xe0\xd2\xe7\x68\xa3\xb6\xf2\xfd\x0f\xf0\x7b\x3d\x48\x45\x28\xd4\x35\xbc\x3c\xfe\xf9\x09\xdd\x97\x62\x72\xad\x15\x9f\x5c\x31\x74\xce\x6f\x68\x06\xa6\x5a\xe8\x7d\x04\x2e\x68\x68\xc1\x01\x71\x5b\xa4\x82\xa2\xa4\xa0\xc5\xbf\xfd\xff\x2f\xd6\x7e\x0f\x7d\xb6\xcd\x03\x60\xc4\xa2\xd5\x0c\x59\x44\x53\x9a\xa0\x2b\x15\x65\x64\xb0\xe3\x54\xf4\x60\xd6\x39\x73\x18\xed\xef\xf2\x5a\x3f\x12\x5a\x85\x2b\xdc\xbf\x52\x4a\x53\xf3\x58\xb3\xe4\x4f\x13\xc1\x88\x09\x56\x36\xba\x2b\x4a\x28\x56\xc3\xbc\x93\x4d\x09\x4a\x4f\x9c\x61\xca\x0a\x6d\xfa\x12\x7a\xb6\x9e\xb0\x05\x9f\xbe\x3c\xf9\xe5\xe5\xaf\xc7\xc7\xc7\xc5\x61\x82\xaf\xd7\x2b\x69\xb8\x1d\x73\x3c\x6b\x5b\x24\x4e\x4e\x4a\x38\x2e\xe1\xf8\x09\xd2\x87\x20\xdf\x32\xeb\x36\xe3\xb8\x69\x55\x1a\xbc\x1f\x82\x7a\x7d\xc3\x16\x1b\x04\xbc\xee\xd4\xa6\x47\xbc\xec\xf0\x92\x76\x1a\x4c\x34\x8e\x7c\x67\x12\x48\x48\xc2\x37\x0f\xf5\xd6\x1e\xfc\x39\xb9\xd7\xc8\x9a\x83\x0b\x27\x83\x8e\x36\xbc\xfd\xe9\x06\x3b\x3f\xd5\xc2\x3f\x9c\xba\xe8\x69\xc9\x1b\x53\x76\xac\xf3\x9e\x3f\x70\x63\xf9\xc1\x72\x26\x7c\x77\xb8\xec\x5e\xe2\x77\x56\x37\xfc\x61\x4f\xe0\x3b\x74\xf8\xaf\x45\x6e\x7e\x04\x29\xd6\xf3\x3d\xa5\x98\x42\xf0\x7c\xf3\x5a\xf9\x4f\xb5\xb7\x18\x7e\x37\xd6\xfc\x55\xe5\xf1\x9b\x6f\xaf\xf8\x4e\xd2\x77\xd6\x36\xfc\x61\x53\xf6\xdf\x00\x00\x00\xff\xff\x29\x60\x66\x23\x26\x0d\x00\x00"),
		},
		"/manifest.go.extra": &vfsgen۰FileInfo{
			name:    "manifest.go.extra",
			modTime: time.Date(2019, 1, 4, 2, 24, 51, 963299486, time.UTC),
			content: []byte("\x76\x61\x72\x20\x28\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x6d\x61\x6e\x69\x66\x65\x73\x74\x20\x3d\x20\x25\x23\x76\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x72\x65\x76\x20\x20\x20\x20\x20\x20\x3d\x20\x25\x23\x76\x0a\x29\x0a"),
		},
		"/package.json": &vfsgen۰CompressedFileInfo{
			name:             "package.json",
			modTime:          time.Date(2019, 1, 4, 2, 24, 51, 963320147, time.UTC),
			uncompressedSize: 174,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\xcb\xc2\x30\x10\xc6\xf1\x3d\x9f\xe2\x38\xc8\xf6\xae\xef\xd2\xc1\xc5\x76\x10\xa4\x8b\x38\x89\x43\xbd\x1c\x78\x50\x93\x78\x17\x75\x28\xfd\xee\x92\x08\x3a\x3e\xcf\xef\xbf\x38\x00\x8c\xd3\x8d\xb1\x03\x7f\xff\xab\x2b\xb0\x91\x4a\x2e\x92\xe2\xef\x9c\x85\x38\x5a\xad\xf0\x38\xee\x77\xdb\x61\x3c\x0c\x3d\x36\xca\x2a\xcf\xa9\x54\x2a\xfa\xe0\x76\x5d\x34\xbd\x8c\xd5\x66\xb1\x82\x1d\x9c\x1c\x00\x00\x6e\xe0\xdf\x7b\x74\x00\xe7\x16\xd1\x44\x57\xee\x45\x99\x4a\x52\x61\xab\xa1\xb7\x2f\x07\xce\x1c\x03\x47\xfa\xd0\xb2\xba\xd5\xbd\x03\x00\x00\xff\xff\x18\x68\x1c\x80\xae\x00\x00\x00"),
		},
		"/sass.js": &vfsgen۰CompressedFileInfo{
			name:             "sass.js",
			modTime:          time.Date(2019, 1, 4, 2, 24, 51, 963348736, time.UTC),
			uncompressedSize: 1679,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe2\x3a\x10\x7d\xcf\xaf\x98\xbe\x34\x46\xa5\xa6\x7d\x25\x97\x87\x0a\x55\x57\xba\x57\x6a\xa5\x65\x3f\x1e\x58\xb4\xf2\x26\x13\xb0\xd6\xd8\xe9\xd8\xe9\x16\xa1\xfc\xf7\xd5\xc4\x09\x84\xd2\xaa\xda\x17\x42\x3c\x67\x66\xce\x9c\x39\xf1\xb3\x22\xb0\x18\x60\x06\x84\x4f\xb5\x26\x14\xa9\xc5\x90\x8e\xb2\x84\x23\x5e\x79\x7f\x12\x72\x05\x5e\xf3\x61\x0f\x28\x50\xf9\x9d\xcd\x87\x98\xee\x88\x11\x89\x2e\x41\x5c\x54\xe4\x72\xf4\x5e\xa2\x7d\x96\x77\x8b\xc5\xfd\xe7\x7f\xef\x1f\x7e\x2c\x1e\xe7\xff\x8f\x60\x9f\x00\xe4\xce\x7a\x67\x50\x22\x91\x23\x91\xb6\x8f\x69\x3a\x86\xf4\x04\x0b\xda\x83\x75\x01\x7c\x24\x07\x70\xa8\xfa\xa2\x83\xb8\x1d\x65\x49\x93\x24\x93\x09\x14\xee\x13\x3e\x81\x47\x5b\x78\x50\x2d\x29\xf4\x01\x82\x83\xb0\x41\xd0\x55\x0e\xb9\x32\xe6\xa7\xca\x7f\x81\x47\x7a\x46\x92\x49\x59\xdb\x3c\x68\x67\x63\xaa\xa8\x14\xa9\xad\x1f\x1f\x70\x91\x24\xcf\x9a\x1b\x98\xb1\x56\x32\x27\x54\x01\xe7\xce\x5a\x6c\x33\xc5\xfb\x13\xf2\x7c\x46\x3a\x2b\xd2\x3c\xc2\xd3\x31\xf4\x0d\x45\x2c\x0d\x30\x99\x40\x17\x6d\x5f\x73\x23\x7f\x93\x0e\x28\xfe\x5b\x3c\x3e\x48\x1f\x48\xdb\xb5\x2e\x77\x1d\xb3\x11\x5c\x41\xfa\xdd\x46\x11\x9a\xf6\xb7\xeb\x50\xa8\xa0\x86\xe5\xf9\x7d\xd0\x82\x5f\xdb\xff\x3c\x4b\x05\x33\x68\xcb\x57\x8a\x3c\x46\x68\xd6\x46\x79\x65\x15\x5c\x5e\x42\x15\x37\xd2\x57\x78\x7f\x51\x3d\x30\xeb\x70\x67\x9b\xe1\xc3\x06\xd0\x78\x3c\x56\xbf\xa8\x24\xa1\xaf\x4d\xf8\xa0\x3e\x6c\xb5\xf7\xda\xae\x21\xa2\xd3\x0f\xba\x44\x01\xbb\xd5\x89\x43\x8f\xac\x17\xb6\x40\x1f\xc8\xed\xc4\xb9\x7a\x6d\xbb\xa1\x7c\xd8\x33\x7b\x9d\xf6\xbe\x12\xd8\xc5\xdf\xe0\xd6\x0c\x1c\x3a\x57\xc6\x40\x85\x54\x3a\xda\xb2\x4b\x99\xef\x87\xde\xe4\x24\x51\xda\x48\x8a\x30\xd4\x64\xcf\x9d\xc4\xab\x55\xb4\xe6\x6f\x76\xb9\x8a\x5c\x4a\x47\x20\xf8\x5c\xc3\x0c\x6e\x32\xd0\xf0\x0f\x43\xea\x2d\xda\xe0\xa5\x41\xbb\x0e\x1b\xb8\x86\xdb\x0c\xf4\xd5\xd5\x71\x19\x5c\x65\xa9\x57\x30\x3b\x82\x97\x7a\x25\xd7\x18\xbe\x2a\x53\xa3\x38\x08\x7e\xe8\x5b\x38\x8b\x30\x83\x52\x19\x8f\xd9\xe1\x94\xda\xbb\xc5\xd6\xc6\xc4\xb3\xf8\x91\xed\xc3\xae\x42\x98\x42\xca\x13\xb3\x85\x5a\x6b\xc3\x14\xf6\x56\x6d\x39\x50\xda\x71\x1c\x64\xda\x3e\x9a\x66\xb0\x98\x81\x25\x63\x75\xea\x3d\xd1\x51\x08\x54\x77\x0c\x9a\x8e\x66\x77\x27\x49\xe3\x5c\xf5\x6d\xa3\x0d\x8a\xa1\x74\xbd\x9c\x17\x9c\x9f\xb5\x49\x6d\x56\xb0\x5c\x6c\x57\xa1\x2b\x19\x12\x4b\x75\x58\xbe\x04\x25\xc7\xfc\x32\x58\x99\x6f\x14\xdd\x05\x71\x33\x92\xc1\x7d\xa9\x2a\xa4\xb9\xf2\x28\xf8\x53\x0d\x56\x7a\xa3\x73\x14\xb7\xa3\x95\x20\x8c\x56\x6c\x7a\x2f\xac\x31\x1c\x97\x6e\xb4\x0f\xc9\xb9\x92\xaf\x14\x63\xd4\x75\xcf\xde\xa7\x6f\x08\xb3\x75\x45\xcd\xe6\x7c\xa9\x1c\x05\xb6\xc2\xbe\xe1\xa6\x6f\x19\x81\x3a\x03\x9c\x2c\x9f\x31\x25\x8f\x4e\x4b\xdd\x99\xe8\xb4\xe4\xb2\xb4\x6c\x8c\xa3\x27\xdb\x99\x92\x57\xfa\xb3\x8c\x7f\xad\xfb\x9f\x00\x00\x00\xff\xff\xa9\x7c\x25\x5f\x8f\x06\x00\x00"),
		},
		"/yarnrc": &vfsgen۰FileInfo{
			name:    "yarnrc",
			modTime: time.Date(2019, 1, 4, 2, 24, 51, 963365632, time.UTC),
			content: []byte("\x2d\x2d\x6d\x6f\x64\x75\x6c\x65\x73\x2d\x66\x6f\x6c\x64\x65\x72\x20\x25\x71\x0a\x2d\x2d\x2a\x2e\x6e\x6f\x2d\x62\x69\x6e\x2d\x6c\x69\x6e\x6b\x73\x20\x74\x72\x75\x65\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/assets.anko"].(os.FileInfo),
		fs["/gitignore"].(os.FileInfo),
		fs["/manifest.go"].(os.FileInfo),
		fs["/manifest.go.extra"].(os.FileInfo),
		fs["/package.json"].(os.FileInfo),
		fs["/sass.js"].(os.FileInfo),
		fs["/yarnrc"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
