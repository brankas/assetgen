// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// files statically implements the virtual filesystem provided to vfsgen.
var files = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/assets.anko": &vfsgen۰FileInfo{
			name:    "assets.anko",
			modTime: time.Date(2018, 12, 2, 9, 13, 22, 790713512, time.UTC),
			content: []byte("\x23\x20\x67\x65\x6e\x65\x72\x61\x74\x65\x64\x20\x70\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x73\x63\x72\x69\x70\x74\x0a\x0a\x23\x20\x6a\x73\x28\x22\x6a\x73\x2f\x61\x70\x70\x2e\x6a\x73\x22\x2c\x20\x2e\x2e\x2e\x29\x0a"),
		},
		"/gitignore": &vfsgen۰FileInfo{
			name:    "gitignore",
			modTime: time.Date(2018, 12, 2, 9, 13, 22, 790741686, time.UTC),
			content: []byte("\x2f\x61\x73\x73\x65\x74\x73\x2e\x67\x6f\x0a\x2f\x6d\x61\x6e\x69\x66\x65\x73\x74\x2e\x67\x6f\x0a\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2e\x67\x6f\x0a\x2f\x67\x65\x6f\x69\x70\x2f\x67\x65\x6f\x69\x70\x2e\x67\x6f\x0a\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x73\x2f\x2a\x2e\x68\x74\x6d\x6c\x2e\x67\x6f\x0a\x2a\x2e\x6d\x6f\x0a"),
		},
		"/manifest.go": &vfsgen۰CompressedFileInfo{
			name:             "manifest.go",
			modTime:          time.Date(2018, 12, 2, 9, 13, 22, 790780879, time.UTC),
			uncompressedSize: 2337,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xef\x6e\xdb\x36\x10\xff\x2c\x3e\xc5\x55\x40\x03\x32\x13\xa8\xef\x06\xfc\x61\x68\x57\xb4\x40\x87\x05\x49\x86\x7e\x08\x82\x41\x93\x8f\x16\x11\x8b\x54\x48\xca\x75\x1c\xf8\x9d\xf6\x3e\x7b\x99\xe1\x48\xc9\xf2\xbf\xae\x31\x60\x89\xba\x3b\xde\xdd\xef\xc7\xbb\x63\x57\xd5\x4f\xd5\x12\xa1\xf2\x1e\x83\x67\x4c\xb7\x9d\x75\x01\x38\xcb\x72\xd5\x86\x9c\x65\xb9\xc1\x50\x36\x21\x74\xb4\xb6\x9e\x9e\x3e\x38\x6d\x96\x71\x19\x74\x8b\x39\x63\x59\xbe\xd4\xa1\xe9\xff\x96\xb5\x6d\x4b\xdf\xf4\xae\xb6\xf6\x6b\xdc\xa5\x7c\xb9\x56\xbe\x0f\x7a\x95\xff\x8f\xd5\x72\xab\xbb\x9c\x09\xc6\xca\x12\x7e\xaf\x8c\x56\xe8\xc3\xaf\x31\x23\x70\x18\x7a\x67\x3c\x84\x06\xe3\xbf\x1d\xd4\x43\xc6\x50\x79\x20\x0f\xf2\x93\x5e\xe1\xdd\x8b\x0f\xd8\x4a\xb6\xae\xdc\xa9\x9b\x39\xa8\xde\xd4\x5c\x9c\x1a\xc3\x2b\xcb\x94\x87\xd9\x1c\xd6\xca\x2f\xd1\xfc\xfb\xcf\xa7\xbb\x57\x96\x65\x79\x99\xcf\xe0\x6a\x94\x7d\xd4\xee\x8b\x51\x96\x14\x99\xa9\x5a\x9c\x01\x00\xe4\x65\x5e\x90\xa0\xb5\x8b\x7b\x4d\x32\x22\x43\xd2\xf2\x75\x47\x0a\x7a\xec\x18\xcb\xf6\x19\xcf\xe6\xfb\xac\xb8\x60\x19\x3a\x37\xc4\x25\x7a\xe4\xb7\x6a\xf5\xc4\x53\xb6\x45\xf4\x9d\x32\x36\x90\xe8\x2e\x40\x69\xb0\x3e\xa6\x4e\xb9\x14\x40\xfb\xd1\x39\xeb\x44\x7a\x11\x94\xcc\x7f\xd7\xa1\x6e\xe2\xb2\xae\x3c\x46\xa3\x77\x73\x30\x7a\x35\xa3\x5c\x13\x9b\x24\x1d\x0d\x94\x96\x5f\xfc\x47\xed\xb8\x38\x34\x30\x7a\x45\x08\x18\xcb\x32\x55\x80\x7d\xa2\x44\x53\x6e\x92\x4f\x44\x89\x07\xf3\xc8\xb2\x4c\x2b\x78\x67\x9f\x62\xcc\x71\xbf\x6a\x83\xfc\x8d\x92\x52\x3c\x37\x36\x9d\x15\xbc\x7f\xef\xf3\x02\x8c\xd8\x7b\x36\xa3\xeb\x91\xa2\x37\xf9\xab\x6d\xbf\x5a\x80\xb1\x01\x94\x36\x0b\xe8\xaa\xd0\x80\xb2\xee\xd8\x3d\x79\x87\x39\xf1\x08\xbf\x80\x32\x14\x8e\xaa\x62\x0b\xda\x04\x74\xaa\xaa\xf1\x75\x37\xd1\xb5\xa1\x24\x94\xe4\xe1\xa5\x43\x31\x91\x77\x3d\x42\xfd\x60\xdb\xce\xa1\xf7\xb8\x18\xe9\x8f\x64\x6d\x61\x3e\xd5\xc8\xb9\x4d\x04\x30\xd5\xcb\xf4\x53\x26\x16\xce\x54\x39\xd3\x6f\x23\x07\x61\xb2\xa8\xf7\x4e\x3f\x58\x13\xd0\x84\x19\x6c\xe4\x99\x30\xd9\xf6\x66\x52\xdc\xe9\x2d\xb9\xdd\xc8\x53\x61\x34\xdd\x9d\x01\xfc\x31\xac\x1f\x80\xd9\x48\x5a\x9e\xc0\x38\x4b\xfe\x20\xe5\x29\xd1\xdd\x78\x40\xfe\x41\x99\x47\x98\xc3\x36\x7d\xe4\x65\xfe\x28\xf9\xf5\x49\xcf\x09\x89\x26\x38\x8d\xd4\xc2\x55\xd7\xa1\x59\xf0\x9f\xdb\x16\xb0\x95\xfc\xa0\x59\x04\x15\xc5\x61\x69\xef\x04\xa3\x32\x9b\xba\x23\x1e\x7a\x57\x19\x5d\x73\x74\x4e\xa4\xce\x1d\x8b\xcf\xb3\x1d\x17\x8c\x51\x75\xec\xc7\xc4\xe7\xca\x2c\x56\xe8\xa8\x3b\xfb\x3a\xd0\xf6\x26\xcd\x96\x41\xc1\x76\x8c\x51\x03\x03\x6f\x26\x9a\x07\x9d\x80\x3b\x74\x6b\xfc\x7c\x7f\x7f\xc3\x1d\x0e\x03\xec\x16\x7d\x67\x8d\xc7\x6f\x4e\x07\x74\x05\x38\x7c\x86\xeb\x41\xf3\xdc\xa3\x0f\xb1\x30\xb7\x05\xf4\x54\xac\xd7\x0e\x9f\x8b\xf8\x94\x7f\xde\x7e\x65\xd9\x96\x5e\x74\x6e\xfd\xb0\x96\x37\xd4\x17\xf3\x61\x7a\x78\x79\xef\x74\x7b\xe3\x50\xe9\x0d\x9f\xf4\x34\x68\xfe\xca\x05\xcb\x1a\xd9\xc8\xa3\x9c\x0a\xb8\xda\x0a\xc2\x50\x96\x70\x17\xaa\xa0\xeb\x11\xf0\x38\x90\x2b\xf0\x51\x3e\x34\x77\x93\xd4\x05\x7c\xd7\xd4\x8f\xe9\x5b\x9b\x25\x54\xe6\x25\xcd\x27\x4f\xbe\xd0\xd4\xb6\xa7\x16\xc4\x85\x4c\xfc\x1c\x79\xe7\x2a\x4d\xbd\x8b\x8c\x1c\xb1\x51\x0c\xb3\x4f\x1c\xb1\x4e\x14\x0d\xa7\x76\x75\x42\x3a\x1d\x70\x33\x83\xf1\xba\x49\x77\x00\x41\x76\xfc\xf8\xae\x28\x2e\xd9\xfc\xd1\x05\x6d\x8d\x8f\x5d\x10\x25\x71\x1a\xcd\x40\xc5\x49\x2f\xe2\xa8\xdf\x1d\xdd\x5f\x47\x37\x57\xe2\x68\x1c\x73\x03\xf2\xe9\x32\x80\xb6\xea\x1e\xd2\x49\x3d\xa6\xd7\x01\x90\x11\xc7\xb8\x7b\x88\x73\x8b\x6b\x74\x1e\x2f\x86\x73\x49\x77\x39\xec\xc9\xc6\x37\x46\x77\xb8\x3e\x01\x18\x0b\xec\x1c\xe4\x7e\x1e\xd3\x80\x38\x41\x4a\x5b\x38\xc9\x87\xb2\x14\xf0\x53\xb4\x0f\x64\xfe\x78\x8c\xf9\x2c\xf2\xfe\x8a\xbd\x14\xfc\x60\xd3\x1b\x63\x3b\x5c\xef\xc3\xfe\x17\x00\x00\xff\xff\xc0\x9f\xf7\xcc\x21\x09\x00\x00"),
		},
		"/manifest.go.extra": &vfsgen۰FileInfo{
			name:    "manifest.go.extra",
			modTime: time.Date(2018, 12, 2, 9, 13, 22, 790804238, time.UTC),
			content: []byte("\x76\x61\x72\x20\x28\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x6d\x61\x6e\x69\x66\x65\x73\x74\x20\x3d\x20\x25\x23\x76\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x72\x65\x76\x20\x20\x20\x20\x20\x20\x3d\x20\x25\x23\x76\x0a\x29\x0a"),
		},
		"/package.json": &vfsgen۰CompressedFileInfo{
			name:             "package.json",
			modTime:          time.Date(2018, 12, 2, 9, 13, 22, 790837881, time.UTC),
			uncompressedSize: 174,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\xcb\xc2\x30\x10\xc6\xf1\x3d\x9f\xe2\x38\xc8\xf6\xae\xef\xd2\xc1\xc5\x76\x10\xa4\x8b\x38\x89\x43\xbd\x1c\x78\x50\x93\x78\x17\x75\x28\xfd\xee\x92\x08\x3a\x3e\xcf\xef\xbf\x38\x00\x8c\xd3\x8d\xb1\x03\x7f\xff\xab\x2b\xb0\x91\x4a\x2e\x92\xe2\xef\x9c\x85\x38\x5a\xad\xf0\x38\xee\x77\xdb\x61\x3c\x0c\x3d\x36\xca\x2a\xcf\xa9\x54\x2a\xfa\xe0\x76\x5d\x34\xbd\x8c\xd5\x66\xb1\x82\x1d\x9c\x1c\x00\x00\x6e\xe0\xdf\x7b\x74\x00\xe7\x16\xd1\x44\x57\xee\x45\x99\x4a\x52\x61\xab\xa1\xb7\x2f\x07\xce\x1c\x03\x47\xfa\xd0\xb2\xba\xd5\xbd\x03\x00\x00\xff\xff\x18\x68\x1c\x80\xae\x00\x00\x00"),
		},
		"/sass.js": &vfsgen۰CompressedFileInfo{
			name:             "sass.js",
			modTime:          time.Date(2018, 12, 2, 9, 13, 22, 790872444, time.UTC),
			uncompressedSize: 1679,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe2\x3a\x10\x7d\xcf\xaf\x98\xbe\x34\x46\xa5\xa6\x7d\x25\x97\x87\x0a\x55\x57\xba\x57\x6a\xa5\x65\x3f\x1e\x58\xb4\xf2\x26\x13\xb0\xd6\xd8\xe9\xd8\xe9\x16\xa1\xfc\xf7\xd5\xc4\x09\x84\xd2\xaa\xda\x17\x42\x3c\x67\x66\xce\x9c\x39\xf1\xb3\x22\xb0\x18\x60\x06\x84\x4f\xb5\x26\x14\xa9\xc5\x90\x8e\xb2\x84\x23\x5e\x79\x7f\x12\x72\x05\x5e\xf3\x61\x0f\x28\x50\xf9\x9d\xcd\x87\x98\xee\x88\x11\x89\x2e\x41\x5c\x54\xe4\x72\xf4\x5e\xa2\x7d\x96\x77\x8b\xc5\xfd\xe7\x7f\xef\x1f\x7e\x2c\x1e\xe7\xff\x8f\x60\x9f\x00\xe4\xce\x7a\x67\x50\x22\x91\x23\x91\xb6\x8f\x69\x3a\x86\xf4\x04\x0b\xda\x83\x75\x01\x7c\x24\x07\x70\xa8\xfa\xa2\x83\xb8\x1d\x65\x49\x93\x24\x93\x09\x14\xee\x13\x3e\x81\x47\x5b\x78\x50\x2d\x29\xf4\x01\x82\x83\xb0\x41\xd0\x55\x0e\xb9\x32\xe6\xa7\xca\x7f\x81\x47\x7a\x46\x92\x49\x59\xdb\x3c\x68\x67\x63\xaa\xa8\x14\xa9\xad\x1f\x1f\x70\x91\x24\xcf\x9a\x1b\x98\xb1\x56\x32\x27\x54\x01\xe7\xce\x5a\x6c\x33\xc5\xfb\x13\xf2\x7c\x46\x3a\x2b\xd2\x3c\xc2\xd3\x31\xf4\x0d\x45\x2c\x0d\x30\x99\x40\x17\x6d\x5f\x73\x23\x7f\x93\x0e\x28\xfe\x5b\x3c\x3e\x48\x1f\x48\xdb\xb5\x2e\x77\x1d\xb3\x11\x5c\x41\xfa\xdd\x46\x11\x9a\xf6\xb7\xeb\x50\xa8\xa0\x86\xe5\xf9\x7d\xd0\x82\x5f\xdb\xff\x3c\x4b\x05\x33\x68\xcb\x57\x8a\x3c\x46\x68\xd6\x46\x79\x65\x15\x5c\x5e\x42\x15\x37\xd2\x57\x78\x7f\x51\x3d\x30\xeb\x70\x67\x9b\xe1\xc3\x06\xd0\x78\x3c\x56\xbf\xa8\x24\xa1\xaf\x4d\xf8\xa0\x3e\x6c\xb5\xf7\xda\xae\x21\xa2\xd3\x0f\xba\x44\x01\xbb\xd5\x89\x43\x8f\xac\x17\xb6\x40\x1f\xc8\xed\xc4\xb9\x7a\x6d\xbb\xa1\x7c\xd8\x33\x7b\x9d\xf6\xbe\x12\xd8\xc5\xdf\xe0\xd6\x0c\x1c\x3a\x57\xc6\x40\x85\x54\x3a\xda\xb2\x4b\x99\xef\x87\xde\xe4\x24\x51\xda\x48\x8a\x30\xd4\x64\xcf\x9d\xc4\xab\x55\xb4\xe6\x6f\x76\xb9\x8a\x5c\x4a\x47\x20\xf8\x5c\xc3\x0c\x6e\x32\xd0\xf0\x0f\x43\xea\x2d\xda\xe0\xa5\x41\xbb\x0e\x1b\xb8\x86\xdb\x0c\xf4\xd5\xd5\x71\x19\x5c\x65\xa9\x57\x30\x3b\x82\x97\x7a\x25\xd7\x18\xbe\x2a\x53\xa3\x38\x08\x7e\xe8\x5b\x38\x8b\x30\x83\x52\x19\x8f\xd9\xe1\x94\xda\xbb\xc5\xd6\xc6\xc4\xb3\xf8\x91\xed\xc3\xae\x42\x98\x42\xca\x13\xb3\x85\x5a\x6b\xc3\x14\xf6\x56\x6d\x39\x50\xda\x71\x1c\x64\xda\x3e\x9a\x66\xb0\x98\x81\x25\x63\x75\xea\x3d\xd1\x51\x08\x54\x77\x0c\x9a\x8e\x66\x77\x27\x49\xe3\x5c\xf5\x6d\xa3\x0d\x8a\xa1\x74\xbd\x9c\x17\x9c\x9f\xb5\x49\x6d\x56\xb0\x5c\x6c\x57\xa1\x2b\x19\x12\x4b\x75\x58\xbe\x04\x25\xc7\xfc\x32\x58\x99\x6f\x14\xdd\x05\x71\x33\x92\xc1\x7d\xa9\x2a\xa4\xb9\xf2\x28\xf8\x53\x0d\x56\x7a\xa3\x73\x14\xb7\xa3\x95\x20\x8c\x56\x6c\x7a\x2f\xac\x31\x1c\x97\x6e\xb4\x0f\xc9\xb9\x92\xaf\x14\x63\xd4\x75\xcf\xde\xa7\x6f\x08\xb3\x75\x45\xcd\xe6\x7c\xa9\x1c\x05\xb6\xc2\xbe\xe1\xa6\x6f\x19\x81\x3a\x03\x9c\x2c\x9f\x31\x25\x8f\x4e\x4b\xdd\x99\xe8\xb4\xe4\xb2\xb4\x6c\x8c\xa3\x27\xdb\x99\x92\x57\xfa\xb3\x8c\x7f\xad\xfb\x9f\x00\x00\x00\xff\xff\xa9\x7c\x25\x5f\x8f\x06\x00\x00"),
		},
		"/yarnrc": &vfsgen۰FileInfo{
			name:    "yarnrc",
			modTime: time.Date(2018, 12, 2, 9, 13, 22, 790895402, time.UTC),
			content: []byte("\x2d\x2d\x6d\x6f\x64\x75\x6c\x65\x73\x2d\x66\x6f\x6c\x64\x65\x72\x20\x25\x71\x0a\x2d\x2d\x2a\x2e\x6e\x6f\x2d\x62\x69\x6e\x2d\x6c\x69\x6e\x6b\x73\x20\x74\x72\x75\x65\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/assets.anko"].(os.FileInfo),
		fs["/gitignore"].(os.FileInfo),
		fs["/manifest.go"].(os.FileInfo),
		fs["/manifest.go.extra"].(os.FileInfo),
		fs["/package.json"].(os.FileInfo),
		fs["/sass.js"].(os.FileInfo),
		fs["/yarnrc"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
