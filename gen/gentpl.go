// Code generated by vfsgen; DO NOT EDIT.

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// files statically implements the virtual filesystem provided to vfsgen.
var files = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/_assetgen.scss": &vfsgen۰CompressedFileInfo{
			name:             "_assetgen.scss",
			modTime:          time.Date(2020, 4, 28, 23, 42, 37, 528967172, time.UTC),
			uncompressedSize: 132,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x48\xcf\xcf\x4f\xcf\x49\x4d\xcb\xcf\x2b\x51\xc8\xcd\xac\xc8\xcc\xd3\xe3\x72\x00\xd3\x48\x12\x1a\x2a\x20\x52\x53\xa1\x9a\x4b\x41\xc1\x01\xc4\xd4\x4d\x4b\x4c\x4e\x05\x73\x15\x14\x1c\x52\x13\x93\x33\x14\x54\xb2\x75\x14\x54\xca\x14\x70\x6a\x03\x01\xe5\x6a\x95\xec\x5a\x2b\x05\x95\x32\x6b\xb0\x40\x2d\x17\x08\xd7\x72\x01\x02\x00\x00\xff\xff\x13\x5c\x8e\xb4\x84\x00\x00\x00"),
		},
		"/assets.anko": &vfsgen۰FileInfo{
			name:    "assets.anko",
			modTime: time.Date(2020, 4, 28, 23, 42, 37, 528979505, time.UTC),
			content: []byte("\x23\x20\x67\x65\x6e\x65\x72\x61\x74\x65\x64\x20\x70\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x73\x63\x72\x69\x70\x74\x0a\x0a\x23\x20\x6a\x73\x28\x22\x6a\x73\x2f\x61\x70\x70\x2e\x6a\x73\x22\x2c\x20\x2e\x2e\x2e\x29\x0a"),
		},
		"/gitignore": &vfsgen۰FileInfo{
			name:    "gitignore",
			modTime: time.Date(2020, 4, 28, 23, 42, 37, 528991318, time.UTC),
			content: []byte("\x2f\x61\x73\x73\x65\x74\x73\x2e\x67\x6f\x0a\x2f\x6d\x61\x6e\x69\x66\x65\x73\x74\x2e\x67\x6f\x0a\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2f\x6c\x6f\x63\x61\x6c\x65\x73\x2e\x67\x6f\x0a\x2f\x67\x65\x6f\x69\x70\x2f\x67\x65\x6f\x69\x70\x2e\x67\x6f\x0a\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x73\x2f\x2a\x2e\x68\x74\x6d\x6c\x2e\x67\x6f\x0a\x2a\x2e\x6d\x6f\x0a"),
		},
		"/manifest.go": &vfsgen۰CompressedFileInfo{
			name:             "manifest.go",
			modTime:          time.Date(2020, 4, 28, 23, 42, 37, 529025513, time.UTC),
			uncompressedSize: 3673,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\x11\xe0\x40\x4c\xb5\x92\x8d\xb4\x3d\x6c\xba\x07\x37\xb6\x6b\x03\xb1\x11\xc4\x2e\x72\x30\x7c\xa0\x25\x72\x97\xb0\x44\x2a\x24\xd7\x5e\x37\xf1\x3b\xf5\x7d\xfa\x32\xc5\xf0\x67\x57\xda\x6c\xdc\x04\xa8\x2f\x5e\x51\x33\xdf\x7c\xdf\x70\xf8\x51\x3d\xad\xef\xe8\x9c\x01\x35\x86\x59\x93\xa6\xa2\xeb\x95\xb6\x90\xa7\x49\x76\xfb\x68\x99\xc9\xd2\x24\xab\x55\xd7\x6b\x66\x4c\x35\xff\x4b\xf4\x7e\x41\x5a\xb6\xb2\xee\xa7\x7e\xec\xad\xaa\xcc\x82\x1e\xe0\x23\xef\xdc\xaa\x50\x95\x50\x4b\x2b\x5a\x7c\xe8\x44\xc7\xf0\xbf\x64\xb6\x5a\x58\xeb\x10\x94\x03\x36\x56\x0b\x39\x77\x3f\xad\x0b\x4a\x93\x6c\x2e\xec\x62\x79\x5b\xd6\xaa\xab\xcc\x62\xa9\x6b\xa5\xde\xb9\x2c\x6e\xaa\x7b\x6e\x3c\x26\x49\xd3\xaa\x82\x7b\x6e\xe6\x4c\xfe\xf3\xf7\x21\x52\x07\x61\x80\x82\xb1\xd4\x8a\xda\x8b\x29\x53\xfb\xd8\xb3\xad\x28\x63\xf5\xb2\xb6\xf0\x39\x4d\x8e\xa8\xa5\x10\xfe\xae\x6f\x50\x6b\x9a\xbc\x45\x5d\xd2\x5e\x61\x9e\xe7\x96\x26\xe7\xaa\xb9\x12\x1d\x73\x71\x48\xb2\xc4\xa7\x34\xb9\x3c\x3d\x3c\x88\xe9\x21\xf4\x69\xc4\xea\x76\x29\xda\xe6\x9c\x4a\xc1\x99\xb1\xae\xb8\x01\xb7\x66\xa0\x0b\xab\xa1\xe9\x65\xca\x97\xb2\x7e\x2e\x31\x27\x90\x77\xb4\xbf\xf6\x85\x6e\x46\x92\x0a\x60\x5a\x2b\x4d\x50\xd3\x1a\x78\x3a\x83\x88\x90\x93\x34\xf1\x75\x70\xb5\xa3\x77\xec\x19\xa8\x96\xc9\x3c\x82\x10\x92\x26\x4c\x6b\xcc\x0a\x8d\x2f\x3f\xd2\xf6\x2e\xf7\x94\x0a\xc8\xaa\xac\x00\x64\x9e\xcb\xd0\x81\x02\xb8\x00\x65\xca\x13\xd1\xb2\x33\xc9\x95\xa3\x16\xe9\xb9\x7f\x48\x32\x31\x0f\xc2\xd6\x0b\xf7\xb3\xa6\x86\xb9\xa0\x17\x33\x90\xa2\x9d\xa6\x49\x92\x68\x66\x97\x5a\xe2\x6a\x0c\xe0\xa2\x3c\x33\x47\x42\xe7\x64\x18\x20\x45\x9b\x26\xc9\x53\x9a\x26\x09\x2f\x40\xdd\x21\x51\xcf\xad\xcc\xa3\xac\x93\x4b\x72\x2d\x6f\xd2\x24\x11\x1c\x5e\xa8\x3b\x57\x33\xe6\xf3\xce\x96\xc7\x48\x8a\xe7\x99\x54\x7e\x2f\x60\x6f\xcf\x64\x05\x48\xb2\x46\x96\x11\x3a\xb6\xe5\xbb\xf0\x6a\xb5\x6c\x1b\x90\xca\x02\x17\xb2\x81\x9e\xda\x05\x70\xa5\xc7\xf0\x88\x0e\x33\xec\x23\xfc\x04\x5c\x62\xb9\x7b\xaa\xa1\xc1\xc1\x8c\x13\x19\x9b\xb5\x42\x0a\xbc\xcc\x71\xa4\xc9\xa6\x75\xaf\xa2\xd0\xb7\xe1\x88\xb2\x26\x36\xdf\xb7\xca\x6f\xc1\x74\x06\x78\x74\xcb\x0b\xf6\xf0\x81\xd1\x86\xe9\xdc\x9d\xed\xc1\xf3\xaa\xac\xd7\x08\xe1\x14\xe0\xfe\x3b\xa1\x9b\xfd\xf1\x7a\xc7\x3b\xe4\x84\x24\x48\xda\xd7\x9a\x81\x3f\xf9\x25\x22\x1f\xb6\x6d\xae\x7f\x00\x67\x2c\x6a\x24\xc5\xb5\x65\x06\x48\xd4\xd1\x8b\x3b\x54\x0f\xce\xec\x74\x06\x68\x15\xe5\x11\xb3\xac\xb6\x83\xd3\x9c\x63\x36\xd9\x31\x7b\xc1\x81\xca\x53\x6a\xde\x6b\xc6\xc5\x2a\x1f\xe0\x15\x90\xa1\xcd\x55\x19\x81\x2f\x5f\x60\x58\x68\x36\x83\x2c\x9b\x06\x5d\x02\xeb\x46\xa0\x77\xd4\xd8\x33\xd9\xb0\x55\x8e\xa3\x93\x95\x19\x79\x03\x02\x65\x4f\x0e\x82\xea\x11\x0e\x74\xce\x52\x1e\x7b\xf6\xfb\xe3\xf1\xca\x32\x69\x84\x92\x39\x97\xd7\x62\x7a\x43\x62\x57\x9e\xfc\xc0\x7d\x45\xc0\x03\x8e\xf1\x32\xda\xf7\xad\xa8\xa9\x15\x4a\x56\xaa\xb6\xcc\x4e\x8c\xd5\x8c\x76\x59\x6c\x98\x37\x83\x6b\x2e\x6f\x60\x36\x76\x47\x07\x87\xbe\x38\x8d\xce\xe6\xb6\x15\x57\x07\xbd\x9c\x0e\x89\xb8\x97\xc1\x22\x7d\x16\x17\x65\x78\xce\x89\x7b\x8b\x4e\xb9\x06\xc4\x43\x72\xd9\x6b\x21\x2d\xcf\xb3\xbd\xbd\x55\x56\x00\x5e\x1d\xe5\xe5\xb2\xf3\x7b\xe4\x72\x1c\xcf\xe1\x31\x7f\x22\xe9\x8e\x09\xda\x44\x14\x7e\x88\x30\x2f\x2c\xd2\xe0\x52\x98\xee\x8d\xf9\xd2\xdd\x0d\xa7\x54\x36\x2d\xd3\xe0\xc3\x0c\xd8\x05\xdb\xf8\xb1\x3b\xa7\xc3\x3b\x04\x16\x3e\x3c\x58\xf4\x08\x22\x5f\xea\xd6\x1f\x6c\xf4\xc0\x70\x25\x96\x6f\xfd\x7f\x12\x06\x82\xf8\x81\x8c\x55\x3f\x3b\x19\x31\x71\xb6\x91\xd2\x53\x29\xea\x3c\x1b\x42\x42\x4d\x25\x3a\xc8\x2d\xc3\xa8\x8c\x78\x79\x51\xd7\xc6\x99\xbf\x7d\x69\xec\xea\x99\x2f\xc4\xb4\x26\xa3\x76\x0d\x59\x9e\xa0\x1e\x27\x4a\x33\xe3\xdf\x7c\x60\xa6\x57\xd2\xb0\x8f\x5a\x58\xa6\x0b\xd0\xec\x13\xbc\x0a\x6f\x3e\x2d\xf1\xb2\x70\xe0\x55\x05\x73\x4d\x6f\x41\x48\xae\xe2\xa4\x45\xff\x0c\x63\x17\x14\xe6\x9a\x7d\x8a\xbd\xca\x09\xd9\xb6\x54\x07\xed\xcc\x14\x39\x14\x9e\x04\x76\x7f\x69\xae\x30\x63\xf0\x7c\xa1\xec\x89\x5a\xca\x86\x8c\xa2\xd6\xab\x1b\x83\x8e\x73\x55\x55\x50\x2f\x58\x7d\x07\x82\x4f\x3a\xd5\x08\x2e\x58\x33\x31\x42\xd6\x0c\x16\xce\x0c\x0b\xb8\xa5\xa2\x05\xc1\x01\x0d\xd1\x5b\x8d\xe0\x60\xd7\x4d\x77\x9f\x01\xef\xa9\x36\xcc\x13\xc1\x61\x3f\x51\xba\xa3\xd6\x75\xa6\x3c\x75\x30\xe5\x1f\xcc\xe6\xd9\x19\x9f\x9c\xc7\x22\x97\x58\x24\x23\xe4\x8d\x37\x4a\xbf\x29\x2f\x5f\x86\xcf\x95\x70\x6a\xca\x3f\xa5\x58\xe5\x04\x7e\x9b\x81\x8d\xbf\xc3\x35\x63\x4a\xd7\x7f\x0f\xbf\xd5\x83\x58\x84\x40\x55\xc1\xeb\xfd\x9f\x9f\xd1\x7d\xc6\x27\x17\x4a\xb2\xc9\x39\x45\x2b\xfc\x86\x66\xa0\xb2\x81\xce\x45\xe0\x01\xf5\x2d\xd8\x21\x6e\x83\x94\x11\x94\xe4\xb5\xb8\xaf\xa3\xff\x8b\xb5\x3b\x87\x2e\xdb\xa4\x1e\x30\x60\x91\xf2\x12\x59\x04\x6f\x9a\xa0\x1f\x65\x45\x60\x30\x30\x2c\xb2\x33\xeb\x88\x5a\x8c\x76\x7b\x79\xa1\x1e\x72\x52\xfa\x2d\xdc\xde\x52\x42\x62\xf3\x68\xbd\x60\xcf\x13\xc1\x88\x09\x56\xd6\xaa\xcd\x0a\xc8\xfa\xe5\x6d\x2b\xea\x02\xa4\x9a\x58\x4d\xa5\xe1\x4a\x77\x05\x74\x74\x35\xa1\x73\x36\x7b\x7d\xf0\xcb\xeb\x5f\xf7\xf7\xf7\xb3\xdd\x04\x8f\x57\xbd\xd0\xcc\x8c\x39\x1e\x36\x0d\x12\xcf\x0f\x0a\xd8\x2f\x60\xff\x19\xd2\xbb\x20\xf1\x72\x5a\x8f\xe3\xba\x55\x71\xf0\x7e\x08\xea\xf8\x8a\xce\xd7\x08\xb8\xdd\xb1\x4d\x0f\xb8\xd9\xfe\x23\xc6\x2a\xd0\xc1\x38\xd2\xc1\x24\xe4\x3e\xe9\xc8\x5f\xc9\x4f\x24\xf8\x73\x74\xaf\x91\x35\x7b\x17\x8e\x06\x1d\x6c\x78\xf3\x69\x0b\x83\x4f\x59\xff\x0f\xa7\x2e\x78\x5a\xf4\xc6\x98\x1d\xea\x7c\x60\xf7\x4c\x1b\xb6\xb3\x9c\xf6\xef\x76\x97\xdd\x4a\xfc\xce\xea\x9a\xdd\x6f\x09\x7c\x8f\x0e\xff\xb5\xc8\xf5\x47\xa2\xa4\x1d\xdb\x52\x8a\x29\x39\xae\xaf\xaf\x95\xff\x54\x7b\x8d\xe1\x37\x63\xcd\x5f\x55\x1e\xdf\x7c\x5b\xc5\x07\x49\xdf\x59\x5b\xb3\xfb\x75\xd9\x7f\x03\x00\x00\xff\xff\x38\xb6\xa4\x3e\x59\x0e\x00\x00"),
		},
		"/manifest.go.extra": &vfsgen۰FileInfo{
			name:    "manifest.go.extra",
			modTime: time.Date(2020, 4, 28, 23, 42, 37, 529039580, time.UTC),
			content: []byte("\x76\x61\x72\x20\x28\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x6d\x61\x6e\x69\x66\x65\x73\x74\x20\x3d\x20\x25\x23\x76\x0a\x09\x76\x66\x73\x67\x65\x6e\xdb\xb0\x72\x65\x76\x20\x20\x20\x20\x20\x20\x3d\x20\x25\x23\x76\x0a\x29\x0a"),
		},
		"/package.json": &vfsgen۰CompressedFileInfo{
			name:             "package.json",
			modTime:          time.Date(2020, 4, 28, 23, 42, 37, 529052735, time.UTC),
			uncompressedSize: 174,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\xcb\xc2\x30\x10\xc6\xf1\x3d\x9f\xe2\x38\xc8\xf6\xae\xef\xd2\xc1\xc5\x76\x10\xa4\x8b\x38\x89\x43\xbd\x1c\x78\x50\x93\x78\x17\x75\x28\xfd\xee\x92\x08\x3a\x3e\xcf\xef\xbf\x38\x00\x8c\xd3\x8d\xb1\x03\x7f\xff\xab\x2b\xb0\x91\x4a\x2e\x92\xe2\xef\x9c\x85\x38\x5a\xad\xf0\x38\xee\x77\xdb\x61\x3c\x0c\x3d\x36\xca\x2a\xcf\xa9\x54\x2a\xfa\xe0\x76\x5d\x34\xbd\x8c\xd5\x66\xb1\x82\x1d\x9c\x1c\x00\x00\x6e\xe0\xdf\x7b\x74\x00\xe7\x16\xd1\x44\x57\xee\x45\x99\x4a\x52\x61\xab\xa1\xb7\x2f\x07\xce\x1c\x03\x47\xfa\xd0\xb2\xba\xd5\xbd\x03\x00\x00\xff\xff\x18\x68\x1c\x80\xae\x00\x00\x00"),
		},
		"/postcss.config.js": &vfsgen۰CompressedFileInfo{
			name:             "postcss.config.js",
			modTime:          time.Date(2020, 4, 28, 23, 42, 37, 529071821, time.UTC),
			uncompressedSize: 260,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x6e\xc3\x20\x14\x85\xe1\x9d\xa7\xb8\x1d\x22\xa0\x49\xcc\x4e\x9b\xb6\x4b\x9f\xc2\xf5\x80\xf0\xb5\x8d\x84\x01\xc3\x45\xb1\x94\xf8\xdd\x2b\xb5\xee\xd0\xcc\xdf\x39\xff\x1c\xfb\xea\xb1\xc1\x35\xc5\x4c\x05\x2e\x70\x63\x00\xc9\xd7\xd1\x85\xa2\xa1\x65\x00\x00\x19\x97\xea\x32\x0a\x4e\xc6\xf9\xab\x0b\xbd\x2d\x85\x4b\x71\x58\xe4\xe9\xbf\x9b\x4a\x31\x65\x1c\xdc\x8a\x99\x3f\xe2\xc7\x50\xbd\x9f\xea\x6c\x82\x4a\xb1\x90\x2d\xe5\x9c\x6a\x1e\xf1\x37\x76\xfb\x19\x03\xd8\x18\x08\x03\x69\x68\x0f\xcb\x91\xab\xe7\x66\xa2\xd9\xf3\xee\xb4\x73\x8f\x83\xa9\x9e\x3e\x57\xca\xc6\x52\xcc\x1a\xc4\xfe\x90\x70\x79\xfb\x7b\x37\xb3\x21\x3b\x09\xd5\x7e\x5d\xcf\x4a\x77\x47\xf1\xfe\xfa\xa4\xa5\x1a\x25\xdc\xef\xd0\xee\xb1\x4d\x32\x80\x8e\x6d\x2f\xec\x3b\x00\x00\xff\xff\x36\x10\x07\x50\x04\x01\x00\x00"),
		},
		"/sass.js": &vfsgen۰CompressedFileInfo{
			name:             "sass.js",
			modTime:          time.Date(2020, 4, 28, 23, 42, 37, 529100385, time.UTC),
			uncompressedSize: 2181,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x66\x2f\x2b\x1a\x71\x98\xcd\x35\xae\x0f\x41\xb0\x28\xd0\x6d\x37\x40\xd3\x9f\x83\x6b\x14\x5c\x79\x64\xb3\x4b\x91\xda\x21\xa5\xae\x10\xe8\xdd\x8b\x11\x29\x5b\x72\x1c\x04\xbd\xc4\x91\xe6\xe3\xf0\xfb\x21\x47\xad\x22\xb0\x18\x60\x0d\x84\xdf\x1a\x4d\x28\x72\x8b\x21\x5f\xac\x32\xae\x78\xe5\xfd\xac\xe4\x76\x78\xcd\x2f\x47\xc0\x0e\x95\xef\x6c\x31\xc5\xa4\x57\x8c\xc8\x74\x09\xe2\x5d\x4d\xae\x40\xef\x25\xda\x56\xde\x3f\x3d\x7d\xfc\xed\xc7\x8f\x9f\xff\x7e\x7a\x7c\xf8\xb4\x80\xe7\x0c\xa0\x70\xd6\x3b\x83\x12\x89\x1c\x89\x7c\xf8\xb9\xcb\x97\x90\xcf\xb0\xa0\x3d\x58\x17\xc0\x47\x72\x00\xc7\xae\xdf\x75\x10\xb7\x8b\x55\xd6\x67\xd9\xcd\x0d\xec\xdc\xaf\xf8\x0d\x3c\xda\x9d\x07\x35\x90\x42\x1f\x20\x38\x08\x07\x04\x5d\x17\x50\x28\x63\xbe\xa8\xe2\x2b\x78\xa4\x16\x49\x66\x65\x63\x8b\xa0\x9d\x8d\x4b\x45\xad\x48\x55\x7e\x79\xc4\x45\x92\xac\xb5\x30\xb0\x66\xaf\x64\x41\xa8\x02\x3e\x38\x6b\x71\x58\x29\x5e\x57\xc8\xfa\x8c\x74\x56\xe4\x45\x84\xe7\x4b\x18\x37\x14\xb1\x35\xc0\xcd\x0d\xa4\xea\xf0\x58\x18\xf9\x2f\xe9\x80\xe2\xa7\xa7\xc7\xcf\xd2\x07\xd2\x76\xaf\xcb\x2e\x31\x5b\xc0\x15\xe4\x7f\xd9\x68\x42\x3f\xfc\x4d\x3b\xec\x54\x50\xd3\xf6\xfc\x3c\xd9\x82\x1f\x87\xff\x59\x4b\x0d\x6b\x18\xda\xd7\x8a\x3c\x46\xe8\x6a\xa8\x72\x64\x35\xbc\x7f\x0f\x75\x4c\x64\xec\xf0\x7a\x50\x23\x70\x95\x70\x2f\x92\xe1\x97\x3d\xa0\xf1\x78\xea\xfe\xae\x96\x84\xbe\x31\xe1\x8d\xfe\x50\x69\xef\xb5\xdd\x43\x44\xe7\x6f\xec\x12\x0d\x4c\xd1\x89\xe3\x1e\xab\xd1\xd8\x1d\xfa\x40\xae\x13\x2f\xdd\x1b\xb6\x9b\xda\x87\x23\xb3\xf3\x65\xaf\x3b\x81\xa9\x7e\x81\x5b\x7f\x3c\xa1\x85\xb3\x2d\x1c\x94\xdd\x19\xf4\x40\x58\x34\xe4\x75\x8b\xa6\x1b\x0a\x48\x81\xc5\xaa\x78\xf3\x42\x57\xe3\xe4\x80\x32\x40\xb4\x91\x16\x1b\xd9\x82\xb6\x3e\x28\x5b\xa0\x2b\xe1\x9e\x48\x75\x23\x65\x8e\x98\x4f\x2b\x77\x91\xdc\xc5\xcb\x9f\xb5\x0f\xa2\x95\x06\xed\x3e\x1c\x12\xcf\xd2\x11\x08\xc6\x6a\x58\xc3\x87\x15\x68\xf8\x01\x46\xc8\x0a\xf4\xd5\xd5\x29\x1c\x23\x3d\x86\x3f\x94\x69\x50\xe8\x65\x62\xb2\xd1\xdb\xc5\xcc\x78\xc2\xd0\x90\x05\x93\xcd\xf2\x9e\xd1\x7c\xfc\xf2\x0f\x16\x61\xca\xf3\x2b\x76\x3c\x63\x62\x41\xf2\x93\x68\x53\x57\x2e\x57\x73\x19\xbf\xa8\x5a\x30\xe6\x6d\x21\x13\xd4\x99\x96\x8a\xb5\x7c\xc2\xee\xa8\x84\xa1\x13\x31\x09\x71\xae\x36\xa1\x2e\x6b\xae\x86\x90\xd3\xa4\x08\x1d\xdf\x2f\x26\xec\x4a\x68\xb9\x92\x50\x27\x21\x9b\xd0\xd5\xb2\x38\x28\xba\x0f\xe2\xc3\x42\x06\xf7\x7b\x5d\x23\x3d\x28\x8f\x82\x6f\x38\x57\xbd\xd1\x05\x8a\xdb\xc5\x76\xf0\x63\x1c\x6f\x0f\xca\x18\xa8\x91\x4a\x47\x15\x8f\x38\x3e\xec\x6f\x0e\x36\x5e\x24\x4a\x1b\x2d\x48\x5c\x5e\x8c\x21\x66\xae\x68\xcf\x61\x6c\xb6\xaf\xfb\xaa\x68\xdf\x54\x68\xc3\x68\x2e\x5c\xc3\xed\x99\xc1\xdc\x65\xa3\xb7\xb0\x3e\x81\x37\x7a\x2b\xf7\xa3\xa7\x33\x03\x87\xcf\x88\xb3\x08\x6b\x28\x95\xf1\x78\x8a\x9e\x86\xef\x92\x6d\x8c\x89\xef\xe2\x80\x7e\x66\xff\xe0\x0e\x72\x16\xcc\xe3\x67\x18\x8b\x70\x07\xcf\x56\x55\x5c\x28\xed\x32\xea\xb8\x1b\x7e\xfa\x7e\x72\xa9\x27\xe3\x2c\x76\xa7\x31\xf2\x44\x21\x50\x93\x18\xf4\x89\x65\xfa\x9e\x49\xe3\x5c\xfd\xe7\x41\x1b\x14\x53\xe7\x46\x37\xdf\xf1\xfa\xd5\x71\x51\x7a\x3b\x9c\x1c\xc2\x38\x80\xfa\x31\xc4\x3d\x86\x53\x5a\x46\xfb\x90\xbd\xf4\xe0\x4c\x2b\xa3\xae\xc7\x7d\x7d\x7e\x41\x52\xe5\x76\x0d\x8f\xa4\xef\xb5\xa3\xc0\x19\x3e\xf7\xbc\xe9\xa5\x04\xe9\xd2\xb5\x60\x4c\x69\xd9\x91\x8d\x4e\xe9\xcf\x5b\x6e\x4a\xcb\x89\x9e\x0e\xd3\x78\xe2\x67\xce\xb1\x01\xff\xdb\xb1\xff\x02\x00\x00\xff\xff\xd7\x1c\x06\x73\x85\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/_assetgen.scss"].(os.FileInfo),
		fs["/assets.anko"].(os.FileInfo),
		fs["/gitignore"].(os.FileInfo),
		fs["/manifest.go"].(os.FileInfo),
		fs["/manifest.go.extra"].(os.FileInfo),
		fs["/package.json"].(os.FileInfo),
		fs["/postcss.config.js"].(os.FileInfo),
		fs["/sass.js"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
